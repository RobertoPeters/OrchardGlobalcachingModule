@model Globalcaching.Models.GeocacheSearchResult

<table>
    <tr>
        <td>
            @using (Html.BeginFormAntiForgeryPost(Url.Action("ShowMap", "CacheMap", new { area = "Globalcaching" }), FormMethod.Post, new { role = "form" }))
            {
                @Html.HiddenFor(m => m.Filter.OwnerID)
                @Html.HiddenFor(m => m.Filter.CountryID)
                @Html.HiddenFor(m => m.Filter.HomeLat)
                @Html.HiddenFor(m => m.Filter.HomeLon)
                @Html.HiddenFor(m => m.Filter.CenterLat)
                @Html.HiddenFor(m => m.Filter.CenterLon)
                @Html.HiddenFor(m => m.Filter.Radius)
                @Html.HiddenFor(m => m.Filter.OrderBy)
                @Html.HiddenFor(m => m.Filter.OrderByDirection)
                @Html.HiddenFor(m => m.Filter.NameContainsWord)
                @Html.HiddenFor(m => m.Filter.OwnerName)
                @Html.HiddenFor(m => m.Filter.MacroResult)
                @Html.HiddenFor(m => m.Filter.NameSeriesMatch)
    <button type="submit" value="Kaart" class="btn btn-primary">@T("Kaart")</button>
            }
        </td>
        <td>
            @using (Html.BeginFormAntiForgeryPost(Url.Action("CopyListToDownload", "CacheList", new { area = "Globalcaching" }), FormMethod.Post, new { role = "form" }))
            {
                @Html.HiddenFor(m => m.Filter.OwnerID)
                @Html.HiddenFor(m => m.Filter.CountryID)
                @Html.HiddenFor(m => m.Filter.HomeLat)
                @Html.HiddenFor(m => m.Filter.HomeLon)
                @Html.HiddenFor(m => m.Filter.CenterLat)
                @Html.HiddenFor(m => m.Filter.CenterLon)
                @Html.HiddenFor(m => m.Filter.Radius)
                @Html.HiddenFor(m => m.Filter.OrderBy)
                @Html.HiddenFor(m => m.Filter.OrderByDirection)
                @Html.HiddenFor(m => m.Filter.NameContainsWord)
                @Html.HiddenFor(m => m.Filter.OwnerName)
                @Html.HiddenFor(m => m.Filter.MacroResult)
                @Html.HiddenFor(m => m.Filter.NameSeriesMatch)
                <button type="submit" value="Kaart" class="btn btn-primary">@T("Download")</button>
            }
        </td>
    </tr>
</table>
<div id="gccomSearchGeocacheTopPager">
</div>
<table class="table table-striped table-hover" id="gccomSearchGeocacheResults">
    <thead>
        <tr>
            <th></th>
            <th></th>
            <th>Icoon</th>
            <th>M/T</th>
            <th>Beschrijving</th>
            <th>Afstand</th>
            <th>Data</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>
<div id="gccomSearchGeocacheBottomPager">
</div>

<script type="text/javascript">

    var filter = @Html.Raw(Json.Encode(new {
        Page = @Model.Filter.Page,
        PageSize = Model.Filter.PageSize,
        OwnerID = Model.Filter.OwnerID ?? null,
        CountryID = Model.Filter.CountryID ?? null,
        HomeLat = Model.Filter.HomeLat ?? null,
        HomeLon = Model.Filter.HomeLon ?? null,
        CenterLat = Model.Filter.CenterLat ?? null,
        CenterLon = Model.Filter.CenterLon ?? null,
        Radius = Model.Filter.Radius ?? null,
        OrderBy = Model.Filter.OrderBy ?? null,
        OrderByDirection = Model.Filter.OrderByDirection ?? null,
        NameContainsWord = Model.Filter.NameContainsWord ?? null,
        OwnerName = Model.Filter.OwnerName ?? null,
        NameSeriesMatch = Model.Filter.NameSeriesMatch ?? null,
        MacroResult = Model.Filter.MacroResult ?? null
            }));

    initGlobalcachingPager("gccomSearchGeocacheTopPager", "gccomSearchGeocache");
    initGlobalcachingPager("gccomSearchGeocacheBottomPager", "gccomSearchGeocache");

    function requestgccomSearchGeocachePage(page) {
        var resultElementName = "#gccomSearchGeocacheResults";
        var pagerElementName = ".gccomSearchGeocache";

        myApp.showPleaseWait();

        filter.Page = page;

        $(resultElementName).find("tr:gt(0)").remove();
        $(pagerElementName).find("li").remove();
        $.ajax({
            type: "POST",
            url: '@Url.Action("SearchGeocaches", "CacheList", new { area = "Globalcaching" })',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(filter),
            success: function (response) {
                    myApp.hidePleaseWait();

                    updateList(response);
                },
                error: function (data, errorText) {
                    myApp.hidePleaseWait();
                    alert(errorText);
                }
            });
    }

    function updateList(response)
    {
        var resultElementName = "#gccomSearchGeocacheResults";
        var pagerElementName = ".gccomSearchGeocache";
        for (var i = 0; i < response.Items.length; i++) {
            var line = response.Items[i];
            // insert after last row!
            var direction = "";
            if (line.DirectionIcon!=null)
            {
                direction = '<img src="@Href("~/Modules/Globalcaching/Media/compass/")' + line.DirectionIcon +'.gif"/> '+ line.DirectionIcon + '<br />' + Number(line.DistanceFromHome).toFixed(1) + 'km';
            }
            var specialIcon = "";
            if (line.Own)
            {
                specialIcon = '<img src="@Href("~/Modules/Globalcaching/Media/specialicons/mine.gif")'+'"/>';
            }
            else if (line.Found)
            {
                specialIcon = '<img src="@Href("~/Modules/Globalcaching/Media/specialicons/check.gif")'+'"/>';
            }
            var cacheIcon = '<img src="@Href("~/Modules/Globalcaching/Media/WptTypes/")' + line.GeocacheTypeId +'.gif"/>'
            var dtInfo = '('+ Number(line.Terrain).toFixed(1) + '/' + Number(line.Difficulty).toFixed(1) + ')<br /><img src="@Href("~/Modules/Globalcaching/Media/container/")' + line.ContainerTypeId +'.gif"/>'
            var description = '<a href="@Href("~/Geocache/")'+ line.Code +'">' + line.Name + '</a>';
            description += ' (<a href="'+ line.Url +'" target="_blank">' + line.Code + '</a>)<br />';
            description += line.Country;
            if (line.City!=null)
            {
                description += ', <strong>' + line.City + '</strong>';
            }
            description += ' | <a href="http://www.geocaching.com/profile/?guid=' + line.PublicGuid + '" target="_blank">' + line.UserName + '</a>';
            if (line.FavoritePoints!=null)
            {
                description += ' | Favorites: <strong>' + line.FavoritePoints + '</strong>';
            }
            description += ' | #Gevonden: <strong>' + line.FoundCount + '</strong>';
            description += '<br />Acties:';
            description += ' <a href="@Href("~/LogGeocache/")'+ line.ID +'">Log</a>';
            description += ' | <a href="@Href("~/CCCHulp/?wp=")'+ line.Code +'">CCC</a>';
            description += ' | Kaart';
            description += ' | <a href="@Href("~/Geocache/")'+ line.Code +'">Beschrijving</a>';
            var distance = "";
            if (line.Distance!=null)
            {
                distance = Number(line.Distance).toFixed(0);
            }
            var dateInfo = "";
            var d = eval('new' + line.UTCPlaceDate.replace(/\//g, ' '));
            dateInfo = d.toLocaleDateString();
            $(resultElementName + ' > tbody:last').append('<tr><td>'+ direction +'</td><td>'+ specialIcon +'</td><td>'+ cacheIcon +'</td><td>'+ dtInfo +'</td><td>' + description + '</td><td>' + distance + '</td><td>' + dateInfo + '</td></tr>');
        }
        setupGlobalcachingPage(response.CurrentPage, response.PageCount, response.TotalCount, pagerElementName, "requestgccomSearchGeocachePage");
    }

    updateList(@Html.Raw(Json.Encode(@Model)));
</script>

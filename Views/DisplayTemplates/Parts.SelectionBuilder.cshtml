@{
    Script.Require("JointJS.Script").AtHead();
    Script.Require("JointJSShapes.Script").AtHead();
    Style.Require("JointJS.Style").AtHead();
    Style.Require("datetimepicker.Style");
}

<style>
    /* port styling */
    .available-magnet {
        fill: yellow;
    }

    /* element styling */
    .available-cell rect {
        stroke-dasharray: 5, 2;
    }

    .paper {
        border: 1px solid lightgray;
        display: inline-block;
        overflow: hidden;
    }

</style>


<div class="form-group">
    <label for="name">Selecteer eerder opgeslagen stroomdiagram</label>
    <div class="dropdown">
        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown">
            Stroomdiagram
            <span class="caret"></span>
        </button>
        <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1" id="graphlist"></ul>
    </div>
</div>

<div class="form-group">
    <label for="name">Naam</label>
    <input type="text" class="form-control" id="graphname" placeholder="Naam">
</div>

<div class="form-group">
    <label for="exampleInputPassword1">Opmerkingen</label>
    <textarea class="form-control" id="commenttext" rows="4"></textarea>
</div>
<button class="btn btn-primary" id="savegraph">Opslaan</button>
<button class="btn btn-primary" id="loadgraph">Laden</button>
<button class="btn btn-primary" id="newgraph">Nieuw</button>
<button class="btn btn-primary" id="copygraph">Kopieer</button>
<button class="btn btn-danger pull-right" id="deletegraph">Verwijderen</button>

<h3>Editor <span id="activeedit"></span></h3>

<div class="row">
    <div id="topmarker" class="col-md-2">
        <button class="btn btn-default" data-toggle="collapse" data-target="#buildingblocks">Bouwblokken</button>
    </div>
    <div class="col-md-8">
        <button id="zoomin" class="btn btn-default">Zoom in</button>
        <button id="nozoom" class="btn btn-default">100%</button>
        <button id="zoomout" class="btn btn-default">Zoom uit</button>
        <button id="executemodel" class="btn btn-primary">Uitvoeren</button>
    </div>
    <div class="col-md-2">
        <button class="btn btn-default pull-right" data-toggle="collapse" data-target="#editproperties">Blokinstelling</button>
    </div>
</div>
    <div id="buildingblocks" class="collapse col-md-2" style="position: absolute; z-index: 10; top: 200px; left: 0; overflow: auto; border: solid; background-color: #DFECF7; min-height: 800px; max-height: 800px; padding: 0px">
        <ul class="list-group">
            <li class="list-group-item list-group-item-info">Aantallen</li>
            <li class="list-group-item" style="cursor: pointer" id="Favorites" draggable="true" ondragstart="drag(event)" title="Het aantal Favorites wat de geocache gekregen heeft">Favorites</li>
            <li class="list-group-item" style="cursor: pointer" id="Geocacheplaatjes" draggable="true" ondragstart="drag(event)" title="Het aantal plaatjes in de geocachebeschrijving dat geupload is naar geocaching.com">Geocacheplaatjes</li>
            <li class="list-group-item" style="cursor: pointer" id="GevondenLogs" draggable="true" ondragstart="drag(event)" title="Het aantal found logs">Gevonden logs</li>
            <li class="list-group-item" style="cursor: pointer" id="Maximum" draggable="true" ondragstart="drag(event)" title="Het maximum aantakl caches dat geselecteerd mag worden">Maximum aantal</li>
            <li class="list-group-item list-group-item-info">Datum</li>
            <li class="list-group-item" style="cursor: pointer" id="Aanmaakdatum" draggable="true" ondragstart="drag(event)" title="De zogenaamde 'Hidden date'">Aanmaakdatum</li>
            <li class="list-group-item" style="cursor: pointer" id="Aangepastdatum" draggable="true" ondragstart="drag(event)" title="De datum van de laatste aanpassing aan de geocache of log">Aangepast datum</li>
            <li class="list-group-item" style="cursor: pointer" id="Archivedatum" draggable="true" ondragstart="drag(event)" title="De meest recente archive log. De cache hoeft niet per se gearchiveerd te zijn">Archive datum</li>
            <li class="list-group-item" style="cursor: pointer" id="Gevondendatum" draggable="true" ondragstart="drag(event)" title="De datum van de meest recente found log">Gevonden datum</li>
            <li class="list-group-item" style="cursor: pointer" id="Publicatiedatum" draggable="true" ondragstart="drag(event)" title="De datum van publicatie">Publicatiedatum</li>
            <li class="list-group-item list-group-item-info">Diversen</li>
            <li class="list-group-item" style="cursor: pointer" id="Attributen" draggable="true" ondragstart="drag(event)" title="Selecteert de caches die minimaal 1 van de geselecteerde attributen heeft">Attributen</li>
            <li class="list-group-item" style="cursor: pointer" id="Eigenaren" draggable="true" ondragstart="drag(event)" title="Geocaches van eigenaren">Eigenaren</li>
            <li class="list-group-item" style="cursor: pointer" id="Container" draggable="true" ondragstart="drag(event)" title="De container grootte of type">Container</li>
            <li class="list-group-item" style="cursor: pointer" id="Geocachetype" draggable="true" ondragstart="drag(event)" title="De geocache type">Geocache type</li>
            <li class="list-group-item" style="cursor: pointer" id="Gevondendoor" draggable="true" ondragstart="drag(event)" title="De geocaches die minimaal door 1 van de opgegeven cachers gevonden is">Gevonden door</li>
            <li class="list-group-item" style="cursor: pointer" id="Lengte" draggable="true" ondragstart="drag(event)" title="De geocache/wandel afstand in kilometers">Lengte (in km)</li>
            <li class="list-group-item" style="cursor: pointer" id="Parel" draggable="true" ondragstart="drag(event)" title="Parel van de Maand">Parel</li>
            <li class="list-group-item" style="cursor: pointer" id="PremiumMemberOnly" draggable="true" ondragstart="drag(event)" title="Premium Member Only (PMO) geocaches">Premium Member Only</li>
            <li class="list-group-item list-group-item-info">Locatie</li>
            <li class="list-group-item" style="cursor: pointer" id="Breedtegraad" draggable="true" ondragstart="drag(event)" title="De latitude tussen twee waarden">Breedtegraad tussen</li>
            <li class="list-group-item" style="cursor: pointer" id="Land" draggable="true" ondragstart="drag(event)" title="Geocaches in bepaalde landen">Land</li>
            <li class="list-group-item" style="cursor: pointer" id="Lengtegraad" draggable="true" ondragstart="drag(event)" title="De longitude tussen twee waarden">Lengtegraad tussen</li>
            <li class="list-group-item" style="cursor: pointer" id="Locatie" draggable="true" ondragstart="drag(event)" title="Geef middelpunt en radius in km op">Locatie</li>
            <li class="list-group-item list-group-item-info">M/T</li>
            <li class="list-group-item" style="cursor: pointer" id="Moeilijkheid" draggable="true" ondragstart="drag(event)" title="De moeilijkheid">Moeilijkheid</li>
            <li class="list-group-item" style="cursor: pointer" id="Terrein" draggable="true" ondragstart="drag(event)" title="Het terrein">Terrein</li>
            <li class="list-group-item list-group-item-info">Status</li>
            <li class="list-group-item" style="cursor: pointer" id="Beschikbaar" draggable="true" ondragstart="drag(event)">Beschikbaar</li>
            <li class="list-group-item" style="cursor: pointer" id="Gearchiveerd" draggable="true" ondragstart="drag(event)">Gearchiveerd</li>
            <li class="list-group-item" style="cursor: pointer" id="Geblokkeerd" draggable="true" ondragstart="drag(event)">Geblokkeerd</li>
            <li class="list-group-item list-group-item-info">Tekst</li>
            <li class="list-group-item" style="cursor: pointer" id="HintBevatTekst" draggable="true" ondragstart="drag(event)">Hint bevat tekst</li>
            <li class="list-group-item" style="cursor: pointer" id="NaamBevatTekst" draggable="true" ondragstart="drag(event)">Naam bevat tekst</li>
        </ul>
    </div>
    <div class="paper col-md-12" id="paper" style="height: 800px; overflow: auto" ondragover="allowDrop(event)" ondrop="drop(event)"></div>
    <div id="editproperties" class="collapse col-md-3" style="position: absolute; z-index: 10; top: 200px; right: 30px; overflow: auto; border: solid; background-color: #DFECF7; min-height: 800px; max-height: 800px; padding: 0px; ">
    <div id="propeditor">
        <div id="modeltype"></div>
        <button class="btn btn-primary col-md-12" id="deleteModel">Verwijder</button>
        <div id="datumprop">
            <div class="col-md-12">
                Datum:
            </div>
            <div id="changedate" class="col-md-12 date">
                <input type='text' width="100" />
                <span class="fa fa-calendar"></span>
            </div>
        </div>
        <div id="txtvalprop">
            <div class="col-md-12">
                Waarde:
            </div>
            <div class="col-md-12">
                <input id="changetxtval" type='text' width="100" />
            </div>
        </div>
        <div id="rangevalprop">
            <div class="col-md-12">
                Van:
            </div>
            <div class="col-md-12">
                <input id="rangetxtval1" type='text' width="100" />
            </div>
            <div class="col-md-12">
                t/m:
            </div>
            <div class="col-md-12">
                <input id="rangetxtval2" type='text' width="100" />
            </div>
        </div>
        <div id="locvalprop">
            <div class="col-md-12">
                Coordinaat/plaats:
            </div>
            <div class="col-md-12">
                <input id="loctxtval1" type='text' width="100" />
            </div>
            <div class="col-md-12">
                Radius in km:
            </div>
            <div class="col-md-12">
                <input id="loctxtval2" type='text' width="100" />
            </div>
        </div>
        <div id="countryvalprop">
            <div class="col-md-12">
                Land:
            </div>
            <div class="col-md-12"><input type="checkbox" id="country141" />Nederland</div>
            <div class="col-md-12"><input type="checkbox" id="country4" />Belgie</div>
            <div class="col-md-12"><input type="checkbox" id="country8" />Luxemburg</div>
        </div>
        <div id="attributesvalprop">
            <div class="col-md-12">
                Attributen:
            </div>
            @foreach (var attr in Model.AttributeTypes)
            {
                if (attr.ID != 16)
                {
                    <div class="col-md-3">
                        <img style="margin: 5px 5px 5px 5px; cursor: pointer" id="@string.Format("attrnegimg{0}", attr.ID)" src='@Href(string.Format("~/Modules/Globalcaching/Media/Attributes/{0}_.gif",@attr.ID))' width="30" height="30" onclick="toggleNegAttributeButton('@attr.ID')" title="@attr.Name" />
                        <input id="@string.Format("attrnegvalue{0}", attr.ID)" type="hidden" value="0" />
                    </div>
                }
            }
        </div>
        <div id="containervalprop">
            <div class="col-md-12">
                Container:
            </div>
            @foreach (var gt in Model.Containers)
            {
                <div class="col-md-12"><input type="checkbox" id="@string.Format("contype{0}", @gt)" /> <img src="@Href(string.Format("~/Modules/Globalcaching/Media/container/{0}.gif", gt))" /></div>
            }
        </div>
        <div id="gctypevalprop">
            <div class="col-md-12">
                Geocache type:
            </div>
            @foreach (var gt in Model.GeocacheTypes)
            {
                <div class="col-md-12"><input type="checkbox" id="@string.Format("gctype{0}", @gt.ID)" /> <img src="@Href(string.Format("~/Modules/Globalcaching/Media/WptTypes/s/{0}.gif", gt.ID))" /></div>
            }
        </div>
        <div id="maximumvalprop">
            <div class="col-md-12">
                Aantal:
            </div>
            <div class="col-md-12">
                <input id="maximumtxtval1" type='text' width="100" />
            </div>
            <div class="col-md-12">
                Sorteren op:
            </div>
            <div class="col-md-12">
                <select id="newSortBy" name="newSortBy">
                    @if (Model.UserSettings != null && Model.UserSettings.HomelocationLat != null && Model.UserSettings.HomelocationLon != null)
                    {
                        <option value="0">Afstand van middelpunt of thuislocatie</option>
                    }
                    <option value="1">Plaatsingsdatum</option>
                    <option value="2">Publicatiedatum</option>
                    <option value="3">Lengte</option>
                    <option value="4">Meest recente gevonden log</option>
                    <option value="5">Favorites</option>
                    <option value="6">Favorites percentage</option>
                    <option value="7">Aantal keer gevonden</option>
                    <option value="8">Cachetype</option>
                    <option value="9">GC Code</option>
                    <option value="10">Moeilijkheid</option>
                    <option value="11">Terrein</option>
                    <option value="12">Naam</option>
                </select>
            </div>
            <div class="col-md-12">
                Volgorde:
            </div>
            <div class="col-md-12">
                <select id="newSortDir" name="newSortDir">
                    <option value="1">oplopend</option>
                    <option value="-1">aflopend</option>
                </select>
            </div>
        </div>
    </div>
</div>

    <!-- Modal -->
<div class="modal fade" id="myModalx" tabindex="-1" role="dialog" aria-labelledby="myModalLabelx" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button id="dlgclosebutton1x" type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                <h4 class="modal-title" id="myModalLabel"><img src="@Href("~/Modules/Globalcaching/Media/wait28.gif")" /> Bezig met uitvoeren van macro...</h4>
                <h4 class="modal-title" id="myModalLabelDone">Macro resultaat</h4>
            </div>
            <div class="modal-body" id="dlgmacrovoortgangx">
            </div>
            <div class="modal-footer">
                <button id="dlgclosebutton2x" type="button" class="btn btn-default" data-dismiss="modal">Sluiten</button>
                <a id="viewlistbuttonx" type="button" class="btn btn-primary" href='@Url.Action("MacroResult", "CacheList" , new { area="Globalcaching" })'>Bekijk lijst</a>
                <a id="viewmapbuttonx" type="button" class="btn btn-primary" href='@Url.Action("MacroResult", "CacheMap" , new { area="Globalcaching" })'>Bekijk kaart</a>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var geocacheTypes = @Html.Raw(Json.Encode(@Model.GeocacheTypes));
    var containerTypes = @Html.Raw(Json.Encode(@Model.Containers));
    var attributeTypes = @Html.Raw(Json.Encode(@Model.AttributeTypes));
</script>

<script type="text/javascript">

    var graph;
    var paper;
    var activeCellView;
    var modelFill = '#CBE2F5';
    var inportFill = '#16A085';
    var outportFill = '#E74C3C';
    var paperScale = 1.0;
    var variableArray = [
        'Resultaat', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
        'aa', 'ac', 'ad', 'ae', 'af', 'ag', 'ah', 'ai', 'aj', 'ak', 'al', 'am', 'an', 'ao', 'ap', 'aq', 'ar', 'as', 'at', 'au', 'av', 'aw', 'ax', 'ay', 'az',
        'ba', 'bc', 'bd', 'be', 'bf', 'bg', 'bh', 'bi', 'bj', 'bk', 'bl', 'bm', 'bn', 'bo', 'bp', 'bq', 'br', 'bs', 'bt', 'bu', 'bv', 'bw', 'bx', 'by', 'bz',
        'ca', 'cc', 'cd', 'ce', 'cf', 'cg', 'ch', 'ci', 'cj', 'ck', 'cl', 'cm', 'cn', 'co', 'cp', 'cq', 'cr', 'cs', 'ct', 'cu', 'cv', 'cw', 'cx', 'cy', 'cz'
    ];
    var curVariableIndex = 0;
    var macro;
    var activeMacrox;
    var availableGraphs;
    var activeGraph;
    var selectedGraphIndex;

    joint.shapes.devs.Model = joint.shapes.basic.Generic.extend(_.extend({}, joint.shapes.basic.PortsModelInterface, {

        markup: '<g class="rotatable"><g class="scalable"><rect class="body"/></g><text class="label"/><g class="inPorts"/><g class="outPorts"/></g>',
        portMarkup: '<g class="port port<%= id %>"><circle class="port-body"/><text class="port-label"/></g>',

        defaults: joint.util.deepSupplement({

            type: 'devs.Model',
            size: { width: 1, height: 1 },

            inPorts: [],
            outPorts: [],

            attrs: {
                '.': { magnet: false },
                '.body': {
                    width: 150, height: 250,
                    stroke: 'black'
                },
                '.port-body': {
                    r: 10,
                    magnet: true,
                    stroke: 'black'
                },
                text: {
                    fill: 'black',
                    'pointer-events': 'none'
                },
                '.label': { text: 'Model', 'ref-x': 10, 'ref-y': .2, 'ref': '.body' },

                // CHANGED: find better positions for port labels
                '.inPorts .port-label': { dy: -30, x: 4 },
                '.outPorts .port-label': { dy: 15, x: 4 }
                //
            }

        }, joint.shapes.basic.Generic.prototype.defaults),

        getPortAttrs: function (portName, index, total, selector, type) {
            var attrs = {};

            var portClass = 'port' + index;
            var portSelector = selector + '>.' + portClass;
            var portLabelSelector = portSelector + '>.port-label';
            var portBodySelector = portSelector + '>.port-body';

            attrs[portLabelSelector] = { text: portName };
            attrs[portBodySelector] = { port: { id: portName || _.uniqueId(type), type: type } };

            // CHANGED: swap x and y ports coordinates ('ref-y' => 'ref-x')
            attrs[portSelector] = { ref: '.body', 'ref-x': (index + 0.5) * (1 / total) };
            // ('ref-dx' => 'ref-dy')
            if (selector === '.outPorts') { attrs[portSelector]['ref-dy'] = 0; }
            //

            return attrs;
        }
    }));

    (function basic() {
        graph = new joint.dia.Graph;
        paper = new joint.dia.Paper({
            el: $('#paper'),
            width: 12000, height: 12000, gridSize: 1,
            model: graph,
            defaultLink: new joint.dia.Link({
                attrs: { '.marker-target': { d: 'M 10 0 L 0 5 L 10 10 z' } }
            }),
            validateConnection: function (cellViewS, magnetS, cellViewT, magnetT, end, linkView) {
                // Prevent linking from input ports.
                if (magnetS && magnetS.getAttribute('type') === 'input') return false;
                // Prevent linking from output ports to input ports within one element.
                if (cellViewS === cellViewT) return false;
                // Prevent linking to input ports.
                return magnetT && magnetT.getAttribute('type') === 'input';
            },
            // Enable marking available cells & magnets
            markAvailable: true//,
            //snapLinks: { radius: 75 }
        });

        paper.on('cell:pointerclick', function (cellView, evt, x, y) {
            setActiveCellView(cellView);
        });
        paper.on('blank:pointerclick', function (evt, x, y) {
            setActiveCellView(null);
        });

        $('#deleteModel').click(function () {
            var ac = activeCellView;
            setActiveCellView(null);
            var links = graph.getConnectedLinks(ac.model);
            for (var k = 0; k < links.length; k++) {
                links[k].remove();
            }
            ac.remove();
        });

        setActiveCellView(null);
    }());

    function allowDrop(ev) {
        ev.preventDefault();
    }

    function drag(ev) {
        ev.dataTransfer.setData("text", ev.target.id);
    }

    function drop(ev) {
        ev.preventDefault();
        var data = ev.dataTransfer.getData("text");
        var bodyOffset = $('#BgLayer1').offset();
        var offset = $('#v-2').offset();
        //alert(ev.clientY.toString() + ', ' + offset.top.toString() + ', ' + bodyOffset.top.toString());
        //alert(ev.clientX.toString() + ', ' + offset.left.toString() + ', ' + bodyOffset.left.toString());
        var x = (bodyOffset.left + ev.clientX - offset.left) / paperScale;
        var y = (bodyOffset.top + ev.clientY - offset.top) / paperScale;
        var m;
        if (data == "Publicatiedatum") {
            m = createPublicationDateModel(x, y).addTo(graph);
        }
        else if (data == "Container") {
            m = createContainerModel(x, y).addTo(graph);
        }
        else if (data == "Attributen") {
            m = createAttributesModel(x, y).addTo(graph);
        }
        else if (data == "Geocachetype") {
            m = createGeocacheTypeModel(x, y).addTo(graph);
        }
        else if (data == "Maximum") {
            m = createMaximumModel(x, y).addTo(graph);
        }
        else if (data == "NaamBevatTekst") {
            m = createNameContainsModel(x, y).addTo(graph);
        }
        else if (data == "Land") {
            m = createCountryModel(x, y).addTo(graph);
        }
        else if (data == "Gearchiveerd") {
            m = createArchivedModel(x, y).addTo(graph);
        }
        else if (data == "Beschikbaar") {
            m = createAvailableModel(x, y).addTo(graph);
        }
        else if (data == "Geblokkeerd") {
            m = createLockedModel(x, y).addTo(graph);
        }
        else if (data == "Eigenaren") {
            m = createOwnersModel(x, y).addTo(graph);
        }
        else if (data == "Gevondendoor") {
            m = createFoundByModel(x, y).addTo(graph);
        }
        else if (data == "HintBevatTekst") {
            m = createHintContainsModel(x, y).addTo(graph);
        }
        else if (data == "Locatie") {
            m = createLocationModel(x, y).addTo(graph);
        }
        else if (data == "GevondenLogs") {
            m = createFoundCountModel(x, y).addTo(graph);
        }
        else if (data == "Geocacheplaatjes") {
            m = createGeocachePicturesModel(x, y).addTo(graph);
        }
        else if (data == "Favorites") {
            m = createFavoritesModel(x, y).addTo(graph);
        }
        else if (data == "Aanmaakdatum") {
            m = createHiddenDateModel(x, y).addTo(graph);
        }
        else if (data == "Gevondendatum") {
            m = createFoundDateModel(x, y).addTo(graph);
        }
        else if (data == "Archivedatum") {
            m = createArchiveDateModel(x, y).addTo(graph);
        }
        else if (data == "Aangepastdatum") {
            m = createChangedDateModel(x, y).addTo(graph);
        }
        else if (data == "Lengtegraad") {
            m = createLongitudeModel(x, y).addTo(graph);
        }
        else if (data == "Breedtegraad") {
            m = createLatitudeModel(x, y).addTo(graph);
        }
        else if (data == "Moeilijkheid") {
            m = createDifficultyModel(x, y).addTo(graph);
        }
        else if (data == "Terrein") {
            m = createTerrainModel(x, y).addTo(graph);
        }
        else if (data == "Lengte") {
            m = createLengteModel(x, y).addTo(graph);
        }
        else if (data == "Parel") {
            m = createParelModel(x, y).addTo(graph);
        }
        else if (data == "PremiumMemberOnly") {
            m = createPMOModel(x, y).addTo(graph);
        }
    }

    function setActiveCellView(c) {
        if (activeCellView != null) {
            activeCellView.unhighlight();
            activeCellView = null;
        }
        if (c != null && c.model.attr('.label/text') != "Start" && c.model.attr('.label/text') != "Resultaat") {
            var s = c.model.attr('.label/text').split('\r\n')[0];
            $('#modeltype').text(s);
            $('#datumprop').hide();
            $('#txtvalprop').hide();
            $('#rangevalprop').hide();
            $('#locvalprop').hide();
            $('#countryvalprop').hide();
            $('#maximumvalprop').hide();
            $('#containervalprop').hide();           
            $('#gctypevalprop').hide();           
            $('#attributesvalprop').hide();
            if (s == "Publicatiedatum") {
                copyDateModelToProperty(c);
                $('#datumprop').show();
            }
            else if (s == "Naam bevat tekst") {
                copyTextModelToProperty(c);
                $('#txtvalprop').show();
            }
            else if (s == "Container") {
                copyContainerModelToProperty(c);
                $('#containervalprop').show();
            }
            else if (s == "Attributen") {
                copyAttributesModelToProperty(c);
                $('#attributesvalprop').show();
            }
            else if (s == "Geocache type") {
                copyGeocacheTypeModelToProperty(c);
                $('#gctypevalprop').show();
            }
            else if (s == "Maximum") {
                copyMaximumModelToProperty(c);
                $('#maximumvalprop').show();
            }
            else if (s == "Hint bevat tekst") {
                copyTextModelToProperty(c);
                $('#txtvalprop').show();
            }
            else if (s == "Gevonden logs") {
                copyTextModelToProperty(c);
                $('#txtvalprop').show();
            }
            else if (s == "Eigenaren") {
                copyTextModelToProperty(c);
                $('#txtvalprop').show();
            }
            else if (s == "Land") {
                copyCountryModelToProperty(c);
                $('#countryvalprop').show();
            }
            else if (s == "Gevonden door") {
                copyTextModelToProperty(c);
                $('#txtvalprop').show();
            }
            else if (s == "Locatie") {
                copyLocModelToProperty(c);
                $('#locvalprop').show();
            }
            else if (s == "Geocacheplaatjes") {
                copyTextModelToProperty(c);
                $('#txtvalprop').show();
            }
            else if (s == "Favorites") {
                copyTextModelToProperty(c);
                $('#txtvalprop').show();
            }
            else if (s == "Parel") {
            }
            else if (s == "Gearchiveerd") {
            }
            else if (s == "Beschikbaar") {
            }
            else if (s == "Geblokkeerd") {
            }
            else if (s == "Premium Member Only") {
            }
            else if (s == "Moeilijkheid") {
                copyTextModelToProperty(c);
                $('#txtvalprop').show();
            }
            else if (s == "Terrein") {
                copyTextModelToProperty(c);
                $('#txtvalprop').show();
            }
            else if (s == "Lengte") {
                copyTextModelToProperty(c);
                $('#txtvalprop').show();
            }
            else if (s == "Lengtegraad tussen") {
                copyRangeModelToProperty(c);
                $('#rangevalprop').show();
            }
            else if (s == "Breedtegraad tussen") {
                copyRangeModelToProperty(c);
                $('#rangevalprop').show();
            }
            else if (s == "Aanmaakdatum") {
                copyTextModelToProperty(c);
                $('#txtvalprop').show();
            }
            else if (s == "Gevonden datum") {
                copyTextModelToProperty(c);
                $('#txtvalprop').show();
            }
            else if (s == "Archive datum") {
                copyTextModelToProperty(c);
                $('#txtvalprop').show();
            }
            else if (s == "Aangepast datum") {
                copyTextModelToProperty(c);
                $('#txtvalprop').show();
            }
        }
        activeCellView = c;
        if (activeCellView != null && activeCellView.model.attr('.label/text') != "Start" && c.model.attr('.label/text') != "Resultaat") {
            activeCellView.highlight();
            $('#propeditor').show();
            $("#editproperties").collapse('show');
        }
        else {
            $('#propeditor').hide();
            $("#editproperties").collapse('hide');
        }
    }

    function createStartModel(px, py) {
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 90, height: 30 },
            inPorts: [],
            outPorts: ['='],
            attrs: {
                '.label': { text: 'Start', 'ref-x': .2, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createResultaatModel(px, py) {
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 90, height: 30 },
            inPorts: ['In'],
            outPorts: [],
            attrs: {
                '.label': { text: 'Resultaat', 'ref-x': .2, 'ref-y': .5 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createPublicationDateModel(px, py) {
        var d = moment();
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['<', '<=', '=', '=>', '>'],
            attrs: {
                '.label': { text: 'Publicatiedatum\r\n' + d.date().toString() + '-' + (d.month() + 1).toString() + '-' + d.year(), 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createHiddenDateModel(px, py) {
        var d = moment();
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['<', '<=', '=', '=>', '>'],
            attrs: {
                '.label': { text: 'Aanmaakdatum\r\n' + d.date().toString() + '-' + (d.month() + 1).toString() + '-' + d.year(), 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createChangedDateModel(px, py) {
        var d = moment();
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['<', '<=', '=', '=>', '>'],
            attrs: {
                '.label': { text: 'Aangepast datum\r\n' + d.date().toString() + '-' + (d.month() + 1).toString() + '-' + d.year(), 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createArchiveDateModel(px, py) {
        var d = moment();
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['<', '<=', '=', '=>', '>'],
            attrs: {
                '.label': { text: 'Archive datum\r\n' + d.date().toString() + '-' + (d.month() + 1).toString() + '-' + d.year(), 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createFoundDateModel(px, py) {
        var d = moment();
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['<', '<=', '=', '=>', '>'],
            attrs: {
                '.label': { text: 'Gevonden datum\r\n' + d.date().toString() + '-' + (d.month() + 1).toString() + '-' + d.year(), 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createFoundCountModel(px, py) {
        var d = moment();
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['<', '<=', '=', '=>', '>'],
            attrs: {
                '.label': { text: 'Gevonden logs\r\n100', 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createMaximumModel(px, py) {
        var d = moment();
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['='],
            attrs: {
                '.label': { text: 'Maximum\r\n100\r\n1\r\n1', 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createAttributesModel(px, py) {
        var d = moment();
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['='],
            attrs: {
                '.label': { text: 'Attributen\r\n1', 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createGeocachePicturesModel(px, py) {
        var d = moment();
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['<', '<=', '=', '=>', '>'],
            attrs: {
                '.label': { text: 'Geocacheplaatjes\r\n10', 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createFavoritesModel(px, py) {
        var d = moment();
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['<', '<=', '=', '=>', '>'],
            attrs: {
                '.label': { text: 'Favorites\r\n100', 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createNameContainsModel(px, py) {
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['=', '<>'],
            attrs: {
                '.label': { text: 'Naam bevat tekst\r\nde tekst', 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createContainerModel(px, py) {
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['=', '<>'],
            attrs: {
                '.label': { text: 'Container\r\n3', 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createGeocacheTypeModel(px, py) {
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['=', '<>'],
            attrs: {
                '.label': { text: 'Geocache type\r\n2', 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createCountryModel(px, py) {
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['=', '<>'],
            attrs: {
                '.label': { text: 'Land\r\nNederland', 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createOwnersModel(px, py) {
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['=', '<>'],
            attrs: {
                '.label': { text: 'Eigenaren\r\npietje,pukje', 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createFoundByModel(px, py) {
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['=', '<>'],
            attrs: {
                '.label': { text: 'Gevonden door\r\npietje,pukje', 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createHintContainsModel(px, py) {
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['=', '<>'],
            attrs: {
                '.label': { text: 'Hint bevat tekst\r\nde tekst', 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createParelModel(px, py) {
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 100, height: 90 },
            inPorts: ['in'],
            outPorts: ['='],
            attrs: {
                '.label': { text: 'Parel', 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createArchivedModel(px, py) {
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['=', '<>'],
            attrs: {
                '.label': { text: 'Gearchiveerd', 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createAvailableModel(px, py) {
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['=', '<>'],
            attrs: {
                '.label': { text: 'Beschikbaar', 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createLockedModel(px, py) {
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['=', '<>'],
            attrs: {
                '.label': { text: 'Geblokkeerd', 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createPMOModel(px, py) {
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 150, height: 90 },
            inPorts: ['in'],
            outPorts: ['=', '<>'],
            attrs: {
                '.label': { text: 'Premium Member Only', 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createDifficultyModel(px, py) {
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['<', '<=', '=', '=>', '>'],
            attrs: {
                '.label': { text: 'Moeilijkheid\r\n2.5', 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createTerrainModel(px, py) {
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['<', '<=', '=', '=>', '>'],
            attrs: {
                '.label': { text: 'Terrein\r\n2.5', 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createLengteModel(px, py) {
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['<', '<=', '=', '=>', '>'],
            attrs: {
                '.label': { text: 'Lengte\r\n2.5', 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createLongitudeModel(px, py) {
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['=', '<>'],
            attrs: {
                '.label': { text: 'Lengtegraad tussen\r\n5.1\r\n6.3', 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createLocationModel(px, py) {
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['=', '<>'],
            attrs: {
                '.label': { text: 'Locatie\r\nN51 5.123 E6 3.123\r\n10', 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function createLatitudeModel(px, py) {
        return new joint.shapes.devs.Model({
            position: { x: px, y: py },
            size: { width: 130, height: 90 },
            inPorts: ['in'],
            outPorts: ['=', '<>'],
            attrs: {
                '.label': { text: 'Breedtegraad tussen\r\n51.1\r\n54.3', 'ref-x': .1, 'ref-y': .2 },
                rect: { fill: modelFill },
                '.inPorts circle': { fill: inportFill, magnet: 'passive', type: 'input' },
                '.outPorts circle': { fill: outportFill, type: 'output' }
            }
        });
    }

    function copyDateModelToProperty(c) {
        var s = c.model.attr('.label/text').split('\r\n')[1];
        var m = moment(s, "D-M-YYYY");
        $("#changedate").data("DateTimePicker").setDate(m);
    }

    function copyDatePropertyToModel(d) {
        if (activeCellView != null) {
            var s = activeCellView.model.attr('.label/text').split('\r\n')[0];
            activeCellView.model.attr('.label/text', s + '\r\n' + d.date().toString() + '-' + (d.month() + 1).toString() + '-' + d.year());
        }
    }

    function copyTextModelToProperty(c) {
        var s = c.model.attr('.label/text').split('\r\n')[1];
        $("#changetxtval").val(s);
    }

    function copyRangeModelToProperty(c) {
        var s1 = c.model.attr('.label/text').split('\r\n')[1];
        var s2 = c.model.attr('.label/text').split('\r\n')[2];
        $("#rangetxtval1").val(s1);
        $("#rangetxtval2").val(s2);
    }

    function copyLocModelToProperty(c) {
        var s1 = c.model.attr('.label/text').split('\r\n')[1];
        var s2 = c.model.attr('.label/text').split('\r\n')[2];
        $("#loctxtval1").val(s1);
        $("#loctxtval2").val(s2);
    }

    function copyCountryModelToProperty(c) {
        var s = c.model.attr('.label/text').split('\r\n');
        $('#country141').prop('checked', false);
        $('#country4').prop('checked', false);
        $('#country8').prop('checked', false);
        for (var i = 1; i < s.length; i++) {
            if (s[i] == "Nederland") {
                $('#country141').prop('checked', true);
            }
            else if (s[i] == "Belgie") {
                $('#country4').prop('checked', true);
            }
            if (s[i] == "Luxemburg") {
                $('#country8').prop('checked', true);
            }
        }
    }

    function copyContainerModelToProperty(c) {
        var s = c.model.attr('.label/text').split('\r\n');
        for (var i=0; i<containerTypes.length; i++)
        {
            $('#contype'+containerTypes[i].toString()).prop('checked', false);
        }
        for (var i = 1; i < s.length; i++) {
            $('#contype'+s[i]).prop('checked', true);
        }
    }

    function copyGeocacheTypeModelToProperty(c) {
        var s = c.model.attr('.label/text').split('\r\n');
        for (var i=0; i<geocacheTypes.length; i++)
        {
            $('#gctype'+geocacheTypes[i].ID.toString()).prop('checked', false);
        }
        for (var i = 1; i < s.length; i++) {
            $('#gctype'+s[i]).prop('checked', true);
        }
    }

    function copyAttributesModelToProperty(c) {
        var s = c.model.attr('.label/text').split('\r\n');
        for (var i=0; i<attributeTypes.length; i++)
        {
            if (attributeTypes[i].ID!=16)
            {
                var id = attributeTypes[i].ID.toString();
                $('#attrnegvalue'+id).val('0');
                var sr = $("#attrnegimg"+id).attr("src");
                sr = sr.replace("_"+id, id);
                sr = sr.replace(id+".", id+"_.");
                $("#attrnegimg"+id).attr("src", sr);
            }

        }
        for (var i = 1; i < s.length; i++) {
            var id = parseInt(s[i]);
            if (id>=0)
            {
                var sr = $("#attrnegimg"+s[i]).attr("src");
                sr = sr.replace(s[i]+"_", s[i]);
                $("#attrnegimg"+s[i]).attr("src", sr);
                $('#attrnegvalue'+id).val("1");
            }
            else 
            {
                var nid = s[i].replace('-','');
                var sr = $("#attrnegimg"+nid).attr("src");
                sr = sr.replace(nid+"_", "_"+nid);
                $("#attrnegimg"+nid).attr("src", sr);
                $('#attrnegvalue'+nid).val("2");
            }
        }
    }

    function copyMaximumModelToProperty(c) {
        var s1 = c.model.attr('.label/text').split('\r\n')[1];
        var s2 = c.model.attr('.label/text').split('\r\n')[2];
        var s3 = c.model.attr('.label/text').split('\r\n')[3];
        $("#maximumtxtval1").val(s1);
        $("#newSortBy").val(s2);
        $("#newSortDir").val(s3);
    }

    function copyContainerPropertyToModel() {
        if (activeCellView != null) {
            var s = activeCellView.model.attr('.label/text').split('\r\n')[0];
            for(var i=0; i<containerTypes.length; i++)
            {
                if ($('#contype'+containerTypes[i].toString()).prop('checked'))
                {
                    s += "\r\n" + containerTypes[i].toString();
                }
            }
            activeCellView.model.attr('.label/text', s);
        }
    }

    function copyGeocacheTypePropertyToModel() {
        if (activeCellView != null) {
            var s = activeCellView.model.attr('.label/text').split('\r\n')[0];
            for(var i=0; i<geocacheTypes.length; i++)
            {
                if ($('#gctype'+geocacheTypes[i].ID.toString()).prop('checked'))
                {
                    s += "\r\n" + geocacheTypes[i].ID.toString();
                }
            }
            activeCellView.model.attr('.label/text', s);
        }
    }

    function copyAttributesPropertyToModel() {
        if (activeCellView != null) {
            var s = activeCellView.model.attr('.label/text').split('\r\n')[0];
            for(var i=0; i<attributeTypes.length; i++)
            {
                if (attributeTypes[i].ID!=16)
                {
                    var v = $('#attrnegvalue'+attributeTypes[i].ID.toString()).val();
                    if (v=='1')
                    {
                        s += "\r\n" + attributeTypes[i].ID.toString();
                    }
                    else if (v=='2')
                    {
                        s += "\r\n" + '-' + attributeTypes[i].ID.toString();
                    }
                }
            }
            activeCellView.model.attr('.label/text', s);
        }
    }

    function copyTextPropertyToModel() {
        if (activeCellView != null) {
            var s = activeCellView.model.attr('.label/text').split('\r\n')[0];
            activeCellView.model.attr('.label/text', s + '\r\n' + $("#changetxtval").val());
        }
    }

    function copyRangePropertyToModel() {
        if (activeCellView != null) {
            var s = activeCellView.model.attr('.label/text').split('\r\n')[0];
            activeCellView.model.attr('.label/text', s + '\r\n' + $("#rangetxtval1").val() + '\r\n' + $("#rangetxtval2").val());
        }
    }

    function copyLocPropertyToModel() {
        if (activeCellView != null) {
            var s = activeCellView.model.attr('.label/text').split('\r\n')[0];
            activeCellView.model.attr('.label/text', s + '\r\n' + $("#loctxtval1").val() + '\r\n' + $("#loctxtval2").val());
        }
    }

    function copyMaximumPropertyToModel() {
        if (activeCellView != null) {
            var s = activeCellView.model.attr('.label/text').split('\r\n')[0];
            activeCellView.model.attr('.label/text', s + '\r\n' + $("#maximumtxtval1").val() + '\r\n' + $("#newSortBy").val() + '\r\n' + $("#newSortDir").val());
        }
    }

    function copyCountryPropertyToModel() {
        if (activeCellView != null) {
            var s = activeCellView.model.attr('.label/text').split('\r\n')[0];
            if ($('#country141').prop('checked')) {
                s += "\r\nNederland";
            }
            if ($('#country4').prop('checked')) {
                s += "\r\nBelgie";
            }
            if ($('#country8').prop('checked')) {
                s += "\r\nLuxemburg";
            }
            activeCellView.model.attr('.label/text', s);
        }
    }

    function executeModel() {
        //todo: check model for missing connections
        macro = "";
        createMacroFromModel();
        //alert(JSON.stringify(graph));
        //alert(macro);
        runSba();
    }

    function createMacroFromModel() {
        var allElements = graph.getElements();
        curVariableIndex = 0;
        for (var i = 0; i < allElements.length; i++) {
            if (allElements[i].attr('.label/text') == "Resultaat") {
                processModel(allElements[i], curVariableIndex, null);
                break;
            }
        }
    }

    function processModel(m, inputVariable, outPort) {
        var links = graph.getConnectedLinks(m, { inbound: true });
        //if 1 connection: variable = nextVariable en moduleFilter()
        //if multipel connections: nextVariable = nextVariable1 + nextVariable2...nextVariablen
        //                         variable = nextVariable en moduleFilter()
        //
        //connections to Start are ignored
        //if 1 connection to Start: variable = moduleFilter()
        //if multipel connections: nextVariable = nextVariable2...nextVariablen
        //                         variable = nextVariable en moduleFilter()
        //
        //we produce:
        //intermediateVal[] = [nextVariable1, nextVariable2,nextVariablen]
        var intermediateVal = [];
        for (var i = 0; i < links.length; i++) {
            curVariableIndex++;
            var um = getConnectedModel(links[i]);
            if (um != null && um.attr('.label/text') != "Start") {
                intermediateVal.push(curVariableIndex);
                processModel(um, curVariableIndex, links[i].get('source').port);
            }
        }
        if (intermediateVal.length > 1) {
            //intermediate result
            curVariableIndex++;
            macro += variableArray[curVariableIndex] + " = " + variableArray[intermediateVal[0]];
            for (var k = 1; k < intermediateVal.length; k++) {
                macro += " + " + variableArray[intermediateVal[k]]
            }
            macro += "\r\n";
            if (m.attr('.label/text').split('\r\n')[0] == "Maximum") {
                macro += variableArray[inputVariable] + " = ";
            }
            else {
                macro += variableArray[inputVariable] + " = " + variableArray[curVariableIndex];
            }
        }
        else if (intermediateVal.length == 1) {
            if (m.attr('.label/text').split('\r\n')[0] == "Maximum") {
                macro += variableArray[inputVariable] + " = ";
            }
            else {
                macro += variableArray[inputVariable] + " = " + variableArray[intermediateVal[0]];
            }
        }
        else {
            macro += variableArray[inputVariable] + " = ";
        }
        if (m.attr('.label/text') == "Resultaat" || m.attr('.label/text').split('\r\n')[0] == "Maximum") {
            //only additions
            //Variable should be Resultaat
        }
        else {
            if (intermediateVal.length > 0) {
                macro += " en ";
            }
        }
        if (m.attr('.label/text') == "Start") {
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Maximum") {
            if (intermediateVal.length == 0) {
                macro += ' Maximaal(' + m.attr('.label/text').split('\r\n')[1] + "," + m.attr('.label/text').split('\r\n')[2] + "," + m.attr('.label/text').split('\r\n')[3] + ')';
            }
            else if (intermediateVal.length == 1) {
                macro += ' Maximaal(' + variableArray[intermediateVal[0]] + ', ' + m.attr('.label/text').split('\r\n')[1] + "," + m.attr('.label/text').split('\r\n')[2] + "," + m.attr('.label/text').split('\r\n')[3] + ')';
            }
            else {
                macro += ' Maximaal(' + variableArray[curVariableIndex] + ', ' + m.attr('.label/text').split('\r\n')[1] + "," + m.attr('.label/text').split('\r\n')[2] + "," + m.attr('.label/text').split('\r\n')[3] + ')';
            }
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Naam bevat tekst") {
            if (outPort == '=') {
                macro += ' NaamBevatTekst("' + m.attr('.label/text').split('\r\n')[1].replace(/\"/g, "\\\"") + '")';
            }
            else {
                macro += ' NietNaamBevatTekst("' + m.attr('.label/text').split('\r\n')[1].replace(/\"/g, "\\\"") + '")';
            }
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Land") {
            if (outPort == '=') {
                macro += ' LandCode(';
            }
            else {
                macro += ' NietLandCode(';
            }
            var cn = m.attr('.label/text').split('\r\n');
            if (cn.length > 1) {
                if (cn[1] == "Nederland") {
                    macro += '141';
                }
                else if (cn[1] == "Belgie") {
                    macro += '4';
                }
                else if (cn[1] == "Luxemburg") {
                    macro += '8';
                }
                for (var h = 2; h < cn.length; h++) {
                    if (cn[h] == "Nederland") {
                        macro += ',141';
                    }
                    else if (cn[h] == "Belgie") {
                        macro += ',4';
                    }
                    else if (cn[h] == "Luxemburg") {
                        macro += ',8';
                    }
                }
            }
            macro += ' )';
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Attributen") {
            if (outPort == '=') {
                macro += ' BevatAttribuut(';
            }
            else {
                macro += ' NietBevatAttribuut(';
            }
            var cn = m.attr('.label/text').split('\r\n');
            if (cn.length > 1) {
                macro += cn[1];
                for (var h = 2; h < cn.length; h++) {
                    macro += ',' + cn[h];
                }
            }
            macro += ' )';
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Container") {
            if (outPort == '=') {
                macro += ' Container(';
            }
            else {
                macro += ' NietContainer(';
            }
            var cn = m.attr('.label/text').split('\r\n');
            if (cn.length > 1) {
                macro += cn[1];
                for (var h = 2; h < cn.length; h++) {
                    macro += ',' + cn[h];
                }
            }
            macro += ' )';
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Geocache type") {
            if (outPort == '=') {
                macro += ' CacheType(';
            }
            else {
                macro += ' NietCacheType(';
            }
            var cn = m.attr('.label/text').split('\r\n');
            if (cn.length > 1) {
                macro += cn[1];
                for (var h = 2; h < cn.length; h++) {
                    macro += ',' + cn[h];
                }
            }
            macro += ' )';
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Hint bevat tekst") {
            if (outPort == '=') {
                macro += ' HintsBevatTekst("' + m.attr('.label/text').split('\r\n')[1].replace(/\"/g, "\\\"") + '")';
            }
            else {
                macro += ' NietHintsBevatTekst("' + m.attr('.label/text').split('\r\n')[1].replace(/\"/g, "\\\"") + '")';
            }
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Gevonden door") {
            if (outPort == '=') {
                macro += ' GevondenDoor("' + m.attr('.label/text').split('\r\n')[1].replace(/\"/g, "\\\"").replace(/\,/g, "\",\"") + '")';
            }
            else {
                macro += ' NietGevondenDoor("' + m.attr('.label/text').split('\r\n')[1].replace(/\"/g, "\\\"").replace(/\,/g, "\",\"") + '")';
            }
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Eigenaren") {
            if (outPort == '=') {
                macro += ' VanEigenaar("' + m.attr('.label/text').split('\r\n')[1].replace(/\"/g, "\\\"").replace(/\,/g, "\",\"") + '")';
            }
            else {
                macro += ' NietVanEigenaar("' + m.attr('.label/text').split('\r\n')[1].replace(/\"/g, "\\\"").replace(/\,/g, "\",\"") + '")';
            }
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Parel") {
            if (outPort == '=') {
                macro += ' IsParel()';
            }
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Premium Member Only") {
            if (outPort == '=') {
                macro += ' IsPremiumCache()';
            }
            else {
                macro += ' NietIsPremiumCache()';
            }
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Gearchiveerd") {
            if (outPort == '=') {
                macro += ' Gearchiveerd()';
            }
            else {
                macro += ' NietGearchiveerd()';
            }
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Beschikbaar") {
            if (outPort == '=') {
                macro += ' Beschikbaar()';
            }
            else {
                macro += ' NietBeschikbaar()';
            }
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Geblokkeerd") {
            if (outPort == '=') {
                macro += ' IsGeblokkeerd()';
            }
            else {
                macro += ' NietIsGeblokkeerd()';
            }
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Locatie") {
            if (outPort == '=') {
                macro += ' BinnenStraal("' + m.attr('.label/text').split('\r\n')[1] + '", ' + m.attr('.label/text').split('\r\n')[2] + ')';
            }
            else {
                macro += ' NietBinnenStraal("' + m.attr('.label/text').split('\r\n')[1] + '", ' + m.attr('.label/text').split('\r\n')[2] + ')';
            }
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Lengtegraad tussen") {
            if (outPort == '=') {
                macro += ' LongitudeTussen(' + m.attr('.label/text').split('\r\n')[1] + ', ' + m.attr('.label/text').split('\r\n')[2] + ')';
            }
            else {
                macro += ' NietLongitudeTussen(' + m.attr('.label/text').split('\r\n')[1] + ', ' + m.attr('.label/text').split('\r\n')[2] + ')';
            }
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Breedtegraad tussen") {
            if (outPort == '=') {
                macro += ' LatitudeTussen(' + m.attr('.label/text').split('\r\n')[1] + ', ' + m.attr('.label/text').split('\r\n')[2] + ')';
            }
            else {
                macro += ' NietLatitudeTussen(' + m.attr('.label/text').split('\r\n')[1] + ', ' + m.attr('.label/text').split('\r\n')[2] + ')';
            }
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Gevonden logs") {
            var s = m.attr('.label/text').split('\r\n')[1];
            var d = parseInt(s);
            if (outPort == '=') {
                d -= 1;
                macro += ' AantalKeerGevondenMeerDan(' + d.toString() + ') en ';
                d += 2;
                macro += ' NietAantalKeerGevondenMeerDan(' + d.toString() + ')'
            }
            else if (outPort == '<') {
                d -= 1;
                macro += ' NietAantalKeerGevondenMeerDan(' + d.toString() + ')'
            }
            else if (outPort == '<=') {
                macro += ' NietAantalKeerGevondenMeerDan(' + d.toString() + ')'
            }
            else if (outPort == '=>') {
                d -= 1;
                macro += ' AantalKeerGevondenMeerDan(' + d.toString() + ') ';
            }
            else if (outPort == '>') {
                macro += ' AantalKeerGevondenMeerDan(' + d.toString() + ') ';
            }
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Geocacheplaatjes") {
            var s = m.attr('.label/text').split('\r\n')[1];
            var d = parseInt(s);
            if (outPort == '=') {
                d -= 1;
                macro += ' AantalPlaatjesGroterDan(' + d.toString() + ') en ';
                d += 2;
                macro += ' NietAantalPlaatjesGroterDan(' + d.toString() + ')'
            }
            else if (outPort == '<') {
                d -= 1;
                macro += ' NietAantalPlaatjesGroterDan(' + d.toString() + ')'
            }
            else if (outPort == '<=') {
                macro += ' NietAantalPlaatjesGroterDan(' + d.toString() + ')'
            }
            else if (outPort == '=>') {
                d -= 1;
                macro += ' AantalPlaatjesGroterDan(' + d.toString() + ') ';
            }
            else if (outPort == '>') {
                macro += ' AantalPlaatjesGroterDan(' + d.toString() + ') ';
            }
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Favorites") {
            var s = m.attr('.label/text').split('\r\n')[1];
            var d = parseInt(s);
            if (outPort == '=') {
                d -= 1;
                macro += ' FavorietenMeerDan(' + d.toString() + ') en ';
                d += 2;
                macro += ' NietFavorietenMeerDan(' + d.toString() + ')'
            }
            else if (outPort == '<') {
                d -= 1;
                macro += ' NietFavorietenMeerDan(' + d.toString() + ')'
            }
            else if (outPort == '<=') {
                macro += ' NietFavorietenMeerDan(' + d.toString() + ')'
            }
            else if (outPort == '=>') {
                d -= 1;
                macro += ' FavorietenMeerDan(' + d.toString() + ') ';
            }
            else if (outPort == '>') {
                macro += ' FavorietenMeerDan(' + d.toString() + ') ';
            }
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Lengte") {
            var s = m.attr('.label/text').split('\r\n')[1];
            var d = parseFloat(s);
            if (outPort == '=') {
                d -= 0.1;
                macro += ' CacheAfstandGroterDan(' + d.toString() + ') en ';
                d += 0.2;
                macro += ' NietCacheAfstandGroterDan(' + d.toString() + ')'
            }
            else if (outPort == '<') {
                d -= 0.1;
                macro += ' NietCacheAfstandGroterDan(' + d.toString() + ')'
            }
            else if (outPort == '<=') {
                macro += ' NietCacheAfstandGroterDan(' + d.toString() + ')'
            }
            else if (outPort == '=>') {
                d -= 0.1;
                macro += ' CacheAfstandGroterDan(' + d.toString() + ') ';
            }
            else if (outPort == '>') {
                macro += ' CacheAfstandGroterDan(' + d.toString() + ') ';
            }
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Moeilijkheid") {
            var s = m.attr('.label/text').split('\r\n')[1];
            var d = parseFloat(s);
            if (outPort == '=') {
                d -= 0.1;
                macro += ' MoeilijkheidGroterDan(' + d.toString() + ') en ';
                d += 0.2;
                macro += ' NietMoeilijkheidGroterDan(' + d.toString() + ')'
            }
            else if (outPort == '<') {
                d -= 0.1;
                macro += ' NietMoeilijkheidGroterDan(' + d.toString() + ')'
            }
            else if (outPort == '<=') {
                macro += ' NietMoeilijkheidGroterDan(' + d.toString() + ')'
            }
            else if (outPort == '=>') {
                d -= 0.1;
                macro += ' MoeilijkheidGroterDan(' + d.toString() + ') ';
            }
            else if (outPort == '>') {
                macro += ' MoeilijkheidGroterDan(' + d.toString() + ') ';
            }
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Terrein") {
            var s = m.attr('.label/text').split('\r\n')[1];
            var d = parseFloat(s);
            if (outPort == '=') {
                d -= 0.1;
                macro += ' TerreinGroterDan(' + d.toString() + ') en ';
                d += 0.2;
                macro += ' NietTerreinGroterDan(' + d.toString() + ')'
            }
            else if (outPort == '<') {
                d -= 0.1;
                macro += ' NietTerreinGroterDan(' + d.toString() + ')'
            }
            else if (outPort == '<=') {
                macro += ' NietTerreinGroterDan(' + d.toString() + ')'
            }
            else if (outPort == '=>') {
                d -= 0.1;
                macro += ' TerreinGroterDan(' + d.toString() + ') ';
            }
            else if (outPort == '>') {
                macro += ' TerreinGroterDan(' + d.toString() + ') ';
            }
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Publicatiedatum") {
            var s = m.attr('.label/text').split('\r\n')[1];
            var d = moment(s, "D-M-YYYY");
            if (outPort == '=') {
                d.subtract(1, 'days');
                macro += ' GepubliceerdNaDatum(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ') en ';
                d.add(1, 'days');
                macro += ' NietGepubliceerdNaDatum(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ')'
            }
            else if (outPort == '<') {
                d.subtract(1, 'days');
                macro += ' NietGepubliceerdNaDatum(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ') ';
            }
            else if (outPort == '<=') {
                macro += ' NietGepubliceerdNaDatum(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ') ';
            }
            else if (outPort == '=>') {
                d.subtract(1, 'days');
                macro += ' GepubliceerdNaDatum(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ') ';
            }
            else if (outPort == '>') {
                macro += ' GepubliceerdNaDatum(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ') ';
            }
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Aanmaakdatum") {
            var s = m.attr('.label/text').split('\r\n')[1];
            var d = moment(s, "D-M-YYYY");
            if (outPort == '=') {
                d.subtract(1, 'days');
                macro += ' AanmaakDatumNa(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ') en ';
                d.add(2, 'days');
                macro += ' AanmaakDatumVoor(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ')'
            }
            else if (outPort == '<') {
                d.subtract(1, 'days');
                macro += ' NietAanmaakDatumNa(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ') ';
            }
            else if (outPort == '<=') {
                macro += ' NietAanmaakDatumNa(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ') ';
            }
            else if (outPort == '=>') {
                d.subtract(1, 'days');
                macro += ' AanmaakDatumNa(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ') ';
            }
            else if (outPort == '>') {
                macro += ' AanmaakDatumNa(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ') ';
            }
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Gevonden datum") {
            var s = m.attr('.label/text').split('\r\n')[1];
            var d = moment(s, "D-M-YYYY");
            if (outPort == '=') {
                d.subtract(1, 'days');
                macro += ' GevondenNaDatum(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ') en ';
                d.add(1, 'days');
                macro += ' NietGevondenNaDatum(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ')'
            }
            else if (outPort == '<') {
                d.subtract(1, 'days');
                macro += ' NietGevondenNaDatum(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ') ';
            }
            else if (outPort == '<=') {
                macro += ' NietGevondenNaDatum(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ') ';
            }
            else if (outPort == '=>') {
                d.subtract(1, 'days');
                macro += ' GevondenNaDatum(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ') ';
            }
            else if (outPort == '>') {
                macro += ' GevondenNaDatum(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ') ';
            }
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Archive datum") {
            var s = m.attr('.label/text').split('\r\n')[1];
            var d = moment(s, "D-M-YYYY");
            if (outPort == '=') {
                d.subtract(1, 'days');
                macro += ' ArchivedLogNaDatum(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ') en ';
                d.add(1, 'days');
                macro += ' NietArchivedLogNaDatum(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ')'
            }
            else if (outPort == '<') {
                d.subtract(1, 'days');
                macro += ' NietArchivedLogNaDatum(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ') ';
            }
            else if (outPort == '<=') {
                macro += ' NietArchivedLogNaDatum(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ') ';
            }
            else if (outPort == '=>') {
                d.subtract(1, 'days');
                macro += ' ArchivedLogNaDatum(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ') ';
            }
            else if (outPort == '>') {
                macro += ' ArchivedLogNaDatum(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ') ';
            }
        }
        else if (m.attr('.label/text').split('\r\n')[0] == "Aangepast datum") {
            var s = m.attr('.label/text').split('\r\n')[1];
            var d = moment(s, "D-M-YYYY");
            if (outPort == '=') {
                d.subtract(1, 'days');
                macro += ' AangepastNaDatum(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ') en ';
                d.add(1, 'days');
                macro += ' NietAangepastNaDatum(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ')'
            }
            else if (outPort == '<') {
                d.subtract(1, 'days');
                macro += ' NietAangepastNaDatum(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ') ';
            }
            else if (outPort == '<=') {
                macro += ' NietAangepastNaDatum(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ') ';
            }
            else if (outPort == '=>') {
                d.subtract(1, 'days');
                macro += ' AangepastNaDatum(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ') ';
            }
            else if (outPort == '>') {
                macro += ' AangepastNaDatum(' + d.date().toString() + ',' + (d.month() + 1).toString() + ',' + d.year() + ') ';
            }
        }
        macro += "\r\n";
    }

    function getConnectedModel(link) {
        var result = null;
        var allElements = graph.getElements();
        for (var i = 0; i < allElements.length; i++) {
            var links = graph.getConnectedLinks(allElements[i], { outbound: true });
            for (var k = 0; k < links.length; k++) {
                if (links[k].id == link.id) {
                    result = allElements[i];
                }
            }
        }
        return result;
    }

    function htmlEncodex(value) {
        return $('<div/>').text(value).html();
    }

    function updateMacroProgressx() {
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetMacro", "Macro", new { area = "Globalcaching" })',
            data: {
                id: activeMacrox.ID,
                __RequestVerificationToken: '@Html.AntiForgeryTokenValueOrchard()'
            },
            success: function (response) {
                $('#dlgmacrovoortgangx').html(htmlEncodex(response.ProcessInfo).replace(/\r/g, "<br />").replace(/\n/g, ""));

                if (response.ProcessedSteps < 0 || response.FinishedTime != null) {
                    $('#dlgclosebutton1x').show();
                    $('#dlgclosebutton2x').show();
                    $('#myModalLabel').hide();
                    $('#myModalLabelDone').show();

                    if (response.ProcessedSteps > 0) {
                        $('#viewlistbuttonx').show();
                        $('#viewmapbuttonx').show();
                    }
                }
                else {
                    setTimeout(function () { updateMacroProgressx(); }, 2000);
                }
            },
            error: function (data, errorText) {
                $('#dlgclosebutton1x').show();
                $('#dlgclosebutton2x').show();
                $('#myModalLabel').hide();
                $('#myModalLabelDone').show();
                alert(errorText);
            }
        });

    }

    function runSba() {
        myApp.showPleaseWait();

        $.ajax({
            type: "POST",
            url: '@Url.Action("Run", "Macro", new { area = "Globalcaching" })',
            data: {
                id: "SelectieBewerker",
                macro: macro,
                __RequestVerificationToken: '@Html.AntiForgeryTokenValueOrchard()'
            },
            success: function (response) {
                myApp.hidePleaseWait();

                for (var i = 0; i < response.length; i++) {
                    if (response[i].Name == "SelectieBewerker") {
                        activeMacrox = response[i];
                    }
                }
                //show progress dialog
                $('#myModalLabel').show();
                $('#myModalLabelDone').hide();
                $('#dlgmacrovoortgangx').text('');
                $('#dlgclosebutton1x').hide();
                $('#dlgclosebutton2x').hide();
                $('#viewlistbuttonx').hide();
                $('#viewmapbuttonx').hide();
                $('#myModalx').modal({ show: true, backdrop: 'static', keyboard: false });

                setTimeout(function () { updateMacroProgressx(); }, 2000);
            },
            error: function (data, errorText) {
                myApp.hidePleaseWait();
                alert(errorText);
            }
        });
    }

    function updateGraphList(response) {
        availableGraphs = response.AllOwnedGraphs;
        activeGraph = response.ActiveGraph;

        var activeIndex = -1;
        $('#graphlist').find("li").remove();
        for (var i = 0; i < availableGraphs.length; i++) {
            $('#graphlist').append('<li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="return selectGraphIndex(' + i + ');">' + htmlEncodex(availableGraphs[i].Name) + '</a></li>');
            if (activeGraph != null && activeGraph.ID == availableGraphs[i].ID) {
                activeIndex = i;
            }
        }

        if (activeGraph != null) {
            $('#activeedit').text('(' + activeGraph.Name + ')');
            if (activeGraph.Graph != null && activeGraph.Graph != "") {
                graph.fromJSON(JSON.parse(activeGraph.Graph));
            }
            $("#deletegraph").show();
        }

        selectGraphIndex(activeIndex);
    }

    function selectGraphIndex(index) {
        selectedGraphIndex = index;
        if (index < 0) {
            activeGraph = null;
            graph.clear();
            //build new graph
            //add default name

            createStartModel(300, 10).addTo(graph);
            createResultaatModel(300, 500).addTo(graph);
            $('#graphname').val('Nieuwe diagram');
            $('#activeedit').text('(*)');
            $('#commenttext').val("");
            $("#loadgraph").hide();
            $("#deletegraph").hide();
            $("#copygraph").hide();            
        }
        else {
            $("#loadgraph").show();
            $("#deletegraph").show();
            $("#copygraph").show();            
            $('#graphname').val(availableGraphs[selectedGraphIndex].Name);
            $('#commenttext').val(availableGraphs[selectedGraphIndex].Comment);
        }
        return false;
    }

    function saveGraph() {
        var id = -1;
        var comment;
        var name;
        var ispublic = "false";
        if (activeGraph != null) {
            id = activeGraph.ID;
            if (availableGraphs[selectedGraphIndex].ID == activeGraph.ID) {
                comment = $('#commenttext').val();
                name = $('#graphname').val();
                availableGraphs[selectedGraphIndex].Comment = comment;
                availableGraphs[selectedGraphIndex].Name = name;
            }
            else {
                comment = activeGraph.Comment;
                name = activeGraph.Name;
            }
        }
        else {
            //new graph
            comment = $('#commenttext').val();
            name = $('#graphname').val();
        }

        myApp.showPleaseWait();

        $.ajax({
            type: "POST",
            url: '@Url.Action("SaveGraph", "SelectionBuilder", new { area = "Globalcaching" })',
            data: {
                id: id,
                graph: JSON.stringify(graph),
                comment: comment,
                name: name,
                ispublic: ispublic,
                __RequestVerificationToken: '@Html.AntiForgeryTokenValueOrchard()'
            },
            success: function (response) {
                myApp.hidePleaseWait();
                if (id == -1) {
                    updateGraphList(response);
                }
            },
            error: function (data, errorText) {
                myApp.hidePleaseWait();
                alert(errorText);
            }
        });

    }

    function copyGraph() {
        var id = -1;
        var comment;
        var name;
        var ispublic = "false";
        if (activeGraph != null) {
            id = activeGraph.ID;
            if (availableGraphs[selectedGraphIndex].ID == activeGraph.ID) {
                comment = $('#commenttext').val();
                name = $('#graphname').val();
                availableGraphs[selectedGraphIndex].Comment = comment;
                availableGraphs[selectedGraphIndex].Name = name;
            }
            else {
                comment = activeGraph.Comment;
                name = activeGraph.Name;
            }
        }
        else {
            //new graph
            comment = $('#commenttext').val();
            name = $('#graphname').val();
        }

        myApp.showPleaseWait();

        $.ajax({
            type: "POST",
            url: '@Url.Action("SaveGraph", "SelectionBuilder", new { area = "Globalcaching" })',
            data: {
                id: '-1',
                graph: JSON.stringify(graph),
                comment: comment,
                name: name,
                ispublic: ispublic,
                __RequestVerificationToken: '@Html.AntiForgeryTokenValueOrchard()'
            },
            success: function (response) {
                myApp.hidePleaseWait();
                updateGraphList(response);
            },
            error: function (data, errorText) {
                myApp.hidePleaseWait();
                alert(errorText);
            }
        });

    }

    function loadGraph() {
        myApp.showPleaseWait();

        $.ajax({
            type: "POST",
            url: '@Url.Action("LoadGraph", "SelectionBuilder", new { area = "Globalcaching" })',
            data: {
                id: availableGraphs[selectedGraphIndex].ID,
                __RequestVerificationToken: '@Html.AntiForgeryTokenValueOrchard()'
            },
            success: function (response) {
                myApp.hidePleaseWait();
                updateGraphList(response);
            },
            error: function (data, errorText) {
                myApp.hidePleaseWait();
                alert(errorText);
            }
        });

    }

    function deleteGraph() {
        myApp.showPleaseWait();

        $.ajax({
            type: "POST",
            url: '@Url.Action("DeleteGraph", "SelectionBuilder", new { area = "Globalcaching" })',
            data: {
                id: availableGraphs[selectedGraphIndex].ID,
                __RequestVerificationToken: '@Html.AntiForgeryTokenValueOrchard()'
            },
            success: function (response) {
                myApp.hidePleaseWait();
                updateGraphList(response);
            },
            error: function (data, errorText) {
                myApp.hidePleaseWait();
                alert(errorText);
            }
        });

    }

    function toggleNegAttributeButton(id){
        var v = $('#attrnegvalue'+id).val();
        var s = $("#attrnegimg"+id).attr("src");
        if (v=='0')
        {
            v = '1';
            s = s.replace(id+"_", id);
            $("#attrnegimg"+id).attr("src", s);
        }
        else if (v=='1')
        {
            v = '2';
            s = s.replace(id, "_"+id);
            $("#attrnegimg"+id).attr("src", s);
        }
        else{
            v = '0';
            s = s.replace("_"+id, id+"_");
            $("#attrnegimg"+id).attr("src", s);
        }
        $('#attrnegvalue'+id).val(v);
        copyAttributesPropertyToModel();
    }

    $(function () {
        var e = moment();
        $('#changedate').datetimepicker({
            defaultDate: e
        });
        $("#changedate").on("dp.change", function (e) {
            copyDatePropertyToModel(e.date);
        });
        $("#changetxtval").change(function () {
            copyTextPropertyToModel();
        });
        $("#rangetxtval1").change(function () {
            copyRangePropertyToModel();
        });
        $("#rangetxtval2").change(function () {
            copyRangePropertyToModel();
        });
        $("#loctxtval1").change(function () {
            copyLocPropertyToModel();
        });
        $("#loctxtval2").change(function () {
            copyLocPropertyToModel();
        });
        $("#country141").change(function () {
            copyCountryPropertyToModel();
        });
        $("#country4").change(function () {
            copyCountryPropertyToModel();
        });
        $("#country8").change(function () {
            copyCountryPropertyToModel();
        });
        $("#maximumtxtval1").change(function () {
            copyMaximumPropertyToModel();
        });
        $("#newSortBy").change(function () {
            copyMaximumPropertyToModel();
        });
        $("#newSortDir").change(function () {
            copyMaximumPropertyToModel();
        });
        for (var i=0; i<containerTypes.length; i++)
        {
            $('#contype'+containerTypes[i].toString()).change(function () {
                copyContainerPropertyToModel();
            });
        }
        for (var i=0; i<geocacheTypes.length; i++)
        {
            $('#gctype'+geocacheTypes[i].ID.toString()).change(function () {
                copyGeocacheTypePropertyToModel();
            });
        }

        $("#zoomin").click(function () {
            paperScale += 0.1;
            paper.scale(paperScale, paperScale);
        });
        $("#zoomout").click(function () {
            if (paperScale > 0.2) {
                paperScale -= 0.1;
                paper.scale(paperScale, paperScale);
            }
        });
        $("#nozoom").click(function () {
            paperScale = 1.0;
            paper.scale(paperScale, paperScale);
        });
        $("#executemodel").click(function () {
            executeModel();
        });
        $("#newgraph").click(function () {
            selectGraphIndex(-1);
        });
        $("#savegraph").click(function () {
            saveGraph();
        });
        $("#copygraph").click(function () {
            copyGraph();
        });
        $("#loadgraph").click(function () {
            loadGraph();
        });
        $("#deletegraph").click(function () {
            deleteGraph();
        });

        var bodyOffset = $('#Content').offset();
        var offset = $('#paper').offset();
        var t = offset.top - bodyOffset.top;
        $("#buildingblocks").css({ top: t });
        $("#editproperties").css({ top: t });

        $("#buildingblocks").collapse('show');

        updateGraphList(@Html.Raw(Json.Encode(@Model)));
    });
</script>

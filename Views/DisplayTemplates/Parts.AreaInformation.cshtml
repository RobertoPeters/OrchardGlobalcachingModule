<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>

<div class="input-group">
    <input type="text" class="form-control" id="gotoLocation" placeholder="Coordinaat / Plaats">
    <span class="input-group-btn">
        <button class="btn btn-primary" type="button" id="gotoLocationButton">Zoek!</button>
    </span>
</div><!-- /input-group -->
<img src="http://www.google.com/intl/en_us/mapfiles/ms/micons/red-dot.png" alt="Rode ballon" /> = Over deze locatie hebben wij geen informatie<br />
<img src="http://www.google.com/intl/en_us/mapfiles/ms/micons/blue-dot.png" alt="Blauwe ballon" /> = Over deze locatie hebben wij informatie<br />
<img src="http://www.google.com/intl/en_us/mapfiles/ms/micons/yellow-dot.png" alt="Blauwe ballon" /> = Gegevens worden opgehaald<br />
<div id="map_canvas" style="width: 900px; height: 650px"></div>

<script type="text/javascript">
    var map;
    var reqId = 0;
    var overlay;
    var infowindow;
    var marker;
    var squareMapVis = true;
    var squareArea;
    var polyArea;
    var polyAreaIds = [];
    var blueIcon = new google.maps.MarkerImage("http://www.google.com/intl/en_us/mapfiles/ms/micons/blue-dot.png");
    var redIcon = new google.maps.MarkerImage("http://www.google.com/intl/en_us/mapfiles/ms/micons/red-dot.png");
    var yellowIcon = new google.maps.MarkerImage("http://www.google.com/intl/en_us/mapfiles/ms/micons/yellow-dot.png");
    function createArea(p1, p2) {
        var rectOptions = google.maps.RectangleOptions = {
            clickable: false,
            bounds: new google.maps.LatLngBounds(p1, p2),
            strokeOpacity: 0,
            strokeWeight: 1,
            map: map
        };
        var area = new google.maps.Rectangle(rectOptions);
        return area;
    }
    function visChanged(element, index) {
        if (squareMapVis) {
            element.setMap(map);
        } else {
            element.setMap(null);
        }
    }
    function polyvisChanged(element, index) {
        if (!squareMapVis) {
            element.setMap(map);
        } else {
            element.setMap(null);
        }
    }
    function loadPolygons(reset) {
        reqId++;
        var bnds = map.getBounds();
        requestAreaPolygons(reqId, bnds.getSouthWest().toUrlValue(), bnds.getNorthEast().toUrlValue(), reset);
    }
    function load() {
        var latlng = new google.maps.LatLng(52.15034402766093, 5.526123046875);
        var myOptions = {
            zoom: 13,
            center: latlng,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);
        overlay = new USGSOverlay('@Href("~/Modules/Globalcaching/Media/gmap/reqpoints.png")', map);
        marker = new google.maps.Marker({ map: map, draggable: true, icon: redIcon, position: latlng, visible: false });
        infowindow = new google.maps.InfoWindow();
        squareArea = new google.maps.MVCArray();
        polyArea = new google.maps.MVCArray();
        google.maps.event.addListener(marker, 'dragend', function (event) {
            var point = marker.getPosition();
            $('#gotoLocation').val(point.lat() + ", " + point.lng());
            showAddress($('#gotoLocation').val());
        });
        google.maps.event.addListener(map, 'zoom_changed', function () {
            var isvis = (map.getZoom() <= 13);
            if (isvis != squareMapVis) { squareMapVis = isvis; squareArea.forEach(visChanged); polyArea.forEach(polyvisChanged) }
        });
        google.maps.event.addListener(map, 'idle', function () {
            if (!squareMapVis) { loadPolygons(0); }
        });
        google.maps.event.addListener(map, 'click', function (event) {
            var point = event.latLng;
            marker.setPosition(point);
            $('#gotoLocation').val(point.lat() + ", " + point.lng());
            showAddress($('#gotoLocation').val());
        });
    }

    function requestLocation(loc) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetLocationCoords", "CacheMap", new { area = "Globalcaching" })',
            data: {
                id: loc,
                __RequestVerificationToken: '@Html.AntiForgeryTokenValueOrchard()'
            },
            success: function (response) {
                $('#gotoLocation').val(response);
                requestAreaInfo(response);
            },
            error: function (data, errorText) {
                alert('Kan locatie niet bepalen');
            }
        });
    }

    function requestCoordinates(loc) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetLatLonCoords", "CacheMap", new { area = "Globalcaching" })',
            data: {
                id: loc,
                __RequestVerificationToken: '@Html.AntiForgeryTokenValueOrchard()'
            },
            success: function (response) {
                marker.setPosition(new google.maps.LatLng(response.a, response.o));
                map.setCenter(new google.maps.LatLng(response.a, response.o));
                showAddress($('#gotoLocation').val());
            },
            error: function (data, errorText) {
                alert('Kan adres niet bepalen');
            }
        });
    }

    function requestAreaInfo(loc) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetAreaInfo", "CacheMap", new { area = "Globalcaching" })',
            data: {
                id: loc,
                __RequestVerificationToken: '@Html.AntiForgeryTokenValueOrchard()'
            },
            success: function (response) {
                if (response == "") {
                    marker.setIcon(redIcon);
                }
                else {
                    marker.setIcon(blueIcon);
                    infowindow.setContent(response);
                    infowindow.setPosition(marker.getPosition());
                    infowindow.open(map);
                }
                marker.setVisible(true);
                marker.setAnimation(null);
            },
            error: function (data, errorText) {
                alert('Fout bij het ophalen van de gebiedsinformatie');
            }
        });
    }

    function requestAreaPolygons(requestSequence, minlatminlon, maxlatmaxlon, reset) {
        if (requestSequence < reqId) return;

        overlay.show();
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetAreaPolygons", "CacheMap", new { area = "Globalcaching" })',
            data: {
                minlatminlon: minlatminlon,
                maxlatmaxlon: maxlatmaxlon,
                reset: reset,
                __RequestVerificationToken: '@Html.AntiForgeryTokenValueOrchard()'
            },
            success: function (response) {
                overlay.hide();
                if (response != "") {
                    eval("var areas = " + response);
                    if (areas.length > 0) {
                        for (var i = 0; i < areas.length; i++) {
                            if (!contains(polyAreaIds, areas[i].id)) {
                                polyAreaIds.push(areas[i].id);
                                var pgp = [];
                                for (var k = 0; k < areas[i].points.length; k++) {
                                    pgp.push(new google.maps.LatLng(areas[i].points[k].lat, areas[i].points[k].lon));
                                }
                                polyArea.push(new google.maps.Polygon({ clickable: false, paths: pgp, strokeOpacity: 0, strokeWeight: 1, map: map }));
                            }
                        }
                        if (squareMapVis) { polyArea.forEach(polyvisChanged); }
                        else { setTimeout(function () { if (requestSequence == reqId) { requestAreaPolygons(requestSequence, minlatminlon, maxlatmaxlon, 0); }}, 100); }
                    }
                } else { setTimeout(function () { if (requestSequence == reqId) { requestAreaPolygons(requestSequence, minlatminlon, maxlatmaxlon, 1); } }, 100); }
            },
            error: function (data, errorText) {
                overlay.hide();
            }
        });
    }

    $('#gotoLocation').keypress(function (e) {
        if (e.which == '13') {
            moveMarkerToPos($('#gotoLocation').val());
        }
    });

    $("#gotoLocationButton").click(function () {
        moveMarkerToPos($('#gotoLocation').val());
    });


    function moveMarkerToPos(loc) {
        infowindow.close();
        marker.setIcon(yellowIcon);
        requestCoordinates(loc);
    }

    function showAddress(loc) {
        infowindow.close();
        marker.setIcon(yellowIcon);
        marker.setAnimation(google.maps.Animation.BOUNCE);
        requestLocation(loc);
    }

    function contains(a, obj) {
        for (var i = 0; i < a.length; i++) {
            if (a[i] == obj) {
                return true;
            }
        }
        return false;
    }

    function USGSOverlay(image, map) {

        // Now initialize all properties.
        this.image_ = image;
        this.map_ = map;
        this.showRequests_ = 0;

        // We define a property to hold the image's
        // div. We'll actually create this div
        // upon receipt of the add() method so we'll
        // leave it null for now.
        this.div_ = null;

        // Explicitly call setMap() on this overlay
        this.setMap(map);
    }

    USGSOverlay.prototype = new google.maps.OverlayView();

    USGSOverlay.prototype.onAdd = function () {

        // Note: an overlay's receipt of onAdd() indicates that
        // the map's panes are now available for attaching
        // the overlay to the map via the DOM.

        // Create the DIV and set some basic attributes.
        var div = document.createElement('DIV');
        div.style.border = "none";
        div.style.borderWidth = "0px";
        div.style.position = "absolute";
        div.style.visibility = "hidden";

        // Create an IMG element and attach it to the DIV.
        var img = document.createElement("img");
        img.src = this.image_;
        img.style.width = "100%";
        img.style.height = "100%";
        div.appendChild(img);

        // Set the overlay's div_ property to this DIV
        this.div_ = div;

        // We add an overlay to a map via one of the map's panes.
        // We'll add this overlay to the overlayImage pane.
        var panes = this.getPanes();
        panes.overlayLayer.appendChild(div);
    }

    USGSOverlay.prototype.draw = function () {

        var sw = this.getProjection().fromLatLngToDivPixel(this.map_.getBounds().getSouthWest());
        var ne = this.getProjection().fromLatLngToDivPixel(this.map_.getBounds().getNorthEast());
        sw.x += 30;
        ne.y += 30;
        this.div_.style.left = sw.x + 'px';
        this.div_.style.top = ne.y + 'px';
        this.div_.style.width = '150px';
        this.div_.style.height = '50px';
    }

    USGSOverlay.prototype.hide = function () {
        if (this.div_) {
            this.showRequests_--;
            if (this.showRequests_ <= 0) {
                this.div_.style.visibility = "hidden";
            }
        }
    }

    USGSOverlay.prototype.show = function () {
        if (this.div_) {
            this.showRequests_++;
            var sw = this.getProjection().fromLatLngToDivPixel(this.map_.getBounds().getSouthWest());
            var ne = this.getProjection().fromLatLngToDivPixel(this.map_.getBounds().getNorthEast());
            sw.x += 30;
            ne.y += 30;
            this.div_.style.left = sw.x + 'px';
            this.div_.style.top = ne.y + 'px';
            this.div_.style.visibility = "visible";
        }
    }

    USGSOverlay.prototype.toggle = function () {
        if (this.div_) {
            if (this.div_.style.visibility == "hidden") {
                this.show();
            } else {
                this.hide();
            }
        }
    }

    USGSOverlay.prototype.toggleDOM = function () {
        if (this.getMap()) {
            this.setMap(null);
        } else {
            this.setMap(this.map_);
        }
    }

    $(function () {
        load();
    });
</script>
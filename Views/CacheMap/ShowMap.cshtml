@model Globalcaching.ViewModels.CacheMapSettings
@using Orchard.Mvc.Html
@using Globalcaching.Core;

<div class="row">
    <div class="col-md-4">
        <input id="gotolocation" type="text" placeholder="vul plaats/adres in" width="200" />
        <button class="btn btn-primary" id="gotolocationbutton">Ga naar locatie</button>
    </div>
    @if (Model.Filter.HomeLat!=null)
    { 
    <div class="col-md-2">
        <button class="btn btn-primary" onclick="showAddress('@Helper.GetCoordinatesPresentation((double)Model.Filter.HomeLat, (double)Model.Filter.HomeLon)')">Thuis/Middelpunt</button>
    </div>
    }
    else if (Model.Filter.CenterLat != null)
    {
        <div class="col-md-2">
            <button class="btn btn-primary" onclick="showAddress('@Helper.GetCoordinatesPresentation((double)Model.Filter.CenterLat, (double)Model.Filter.CenterLon)')">Middelpunt</button>
        </div>
    }
    <div class="col-md-2">
@using (Html.BeginFormAntiForgeryPost(Url.Action("CopyViewToDownload", "CacheMap", new { area = "Globalcaching" }), FormMethod.Post, new { role = "form" }))
{
    @Html.HiddenFor(m => m.Filter.MaxResult)
    @Html.HiddenFor(m => m.Filter.OwnerID)
    @Html.HiddenFor(m => m.Filter.CountryID)
    @Html.HiddenFor(m => m.Filter.HomeLat)
    @Html.HiddenFor(m => m.Filter.HomeLon)
    @Html.HiddenFor(m => m.Filter.CenterLat)
    @Html.HiddenFor(m => m.Filter.CenterLon)
    @Html.HiddenFor(m => m.Filter.Radius)
    @Html.HiddenFor(m => m.Filter.OrderBy)
    @Html.HiddenFor(m => m.Filter.OrderByDirection)
    @Html.HiddenFor(m => m.Filter.NameContainsWord)
    @Html.HiddenFor(m => m.Filter.OwnerName)
    @Html.HiddenFor(m => m.Filter.MacroResult)
    @Html.HiddenFor(m => m.Filter.NameSeriesMatch)
    @Html.HiddenFor(m => m.Filter.Parel)
    @Html.HiddenFor(m => m.Filter.MaxPublishedDaysAgo)
    @Html.HiddenFor(m => m.Filter.FTFOpen)
    <input id="minLat" name="minLat" type="hidden" />
    <input id="minLon" name="minLon" type="hidden" />
    <input id="maxLat" name="maxLat" type="hidden" />
    <input id="maxLon" name="maxLon" type="hidden" />
    <button type="submit" id="downloadViewButton" value="DownloadView" class="btn btn-primary pull-right">@T("Download")</button>
}

    </div>
</div>

<table>
    <tr><td><div id="map_canvas"></div></td><td valign="top"><div id="WPInfo" style="padding-left: 10px"></div></td></tr>
</table>

@using (Html.BeginFormAntiForgeryPost(Url.Action("DownloadGeocache", "LiveAPIDownload", new { area = "Globalcaching" }), FormMethod.Post, new { role = "form" }))
{
    <input id="downloadgpxId" name="id" type="hidden" value="" />
    <button id="downloadgpxButton" type="submit" value="Download" class="btn btn-primary">@T("Download")</button>
}

<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
@{
    Script.Require("keydragzoom_packed.Script");
    Script.Require("markerclusterer_compiled.Script");
    Script.Require("gmapv3.Script");
}

<script type="text/javascript">
    var filter = @Html.Raw(Json.Encode(new {
        MaxResult = Model.Filter.MaxResult,
        Page = Model.Filter.Page,
        PageSize = Model.Filter.PageSize,
        OwnerID = Model.Filter.OwnerID ?? null,
        CountryID = Model.Filter.CountryID ?? null,
        HomeLat = Model.Filter.HomeLat ?? null,
        HomeLon = Model.Filter.HomeLon ?? null,
        CenterLat = Model.Filter.CenterLat ?? null,
        CenterLon = Model.Filter.CenterLon ?? null,
        Radius = Model.Filter.Radius ?? null,
        OrderBy = Model.Filter.OrderBy ?? null,
        OrderByDirection = Model.Filter.OrderByDirection ?? null,
        NameContainsWord = Model.Filter.NameContainsWord ?? null,
        MacroResult = Model.Filter.MacroResult ?? null,
        NameSeriesMatch = Model.Filter.NameSeriesMatch ?? null,
        Parel = Model.Filter.Parel ?? null,
        MaxPublishedDaysAgo = Model.Filter.MaxPublishedDaysAgo ?? null,
        FTFOpen = Model.Filter.FTFOpen ?? null,
        OwnerName = Model.Filter.OwnerName ?? null
        }));

    var getGeocachesUrl = '@Url.Action("SearchGeocaches", "CacheMap", new { area = "Globalcaching" })';
    var getwpUrl = '@Url.Action("GetWaypointInfo", "CacheMap", new { area = "Globalcaching" })';

    var initMapSettings = @Html.Raw(Json.Encode(new {
                         centerLat = Model.CenterLat,
                         centerLon = Model.CenterLon,
                         initialZoomLevel = Model.InitialZoomLevel,
                         canDownload = Model.CanDownload
        }));

    $(function () {
        if (!initMapSettings.canDownload)
        {
            $('#downloadViewButton').hide();
        }
        $('#downloadgpxButton').hide();
        $('#gotolocation').keypress(function (e) {
            if (e.which == '13') {
                showAddress($("#gotolocation").val());
                e.preventDefault();
            }
        });

        $("#gotolocationbutton").click(function () {
            showAddress($("#gotolocation").val());
        });

        initializeMap(initMapSettings.centerLat, initMapSettings.centerLon, initMapSettings.initialZoomLevel, '@Href("~/")', filter, getGeocachesUrl, getwpUrl, initMapSettings.canDownload);
    });
</script>
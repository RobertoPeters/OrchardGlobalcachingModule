@using Orchard.Mvc.Html;
@using Globalcaching.Core;
@{
    Layout.Title = @Model.GCComGeocacheData.Name;
}

<div class="panel panel-info">
    <div class="panel-heading">
        Informatie
    </div>
    <div class="panel-body">
        <div class="col-md-12">
            <h1><img src="@Href(string.Format("~/Modules/Globalcaching/Media/WptTypes/{0}.gif",@Model.GCComGeocacheData.GeocacheTypeId))" /> @Model.GCComGeocacheData.Name</h1>
        </div>
        <div class="col-md-8">
            <div class="row">
                <div class="col-md-3"><strong>Url:</strong></div>
                <div class="col-md-9"><a href="@Model.GCComGeocacheData.Url" target="_blank">@Model.GCComGeocacheData.Url</a></div>
            </div>
            <div class="row">
                <div class="col-md-3"><strong>Coordinaat:</strong></div>
                <div class="col-md-9">@Helper.GetCoordinatesPresentation(@Model.GCComGeocacheData.Latitude, @Model.GCComGeocacheData.Longitude)</div>
            </div>
            <div class="row">
                <div class="col-md-3"><strong>Status:</strong></div>
                <div class="col-md-9">
                    @if (Model.GCComGeocacheData.Archived == true)
                    {
                        @String.Format("{0}", "Gearchiveerd")
                    }
                    else if (Model.GCComGeocacheData.Available == false)
                    {
                        @String.Format("{0}", "Niet beschikbaar")
                    }
                    else
                    {
                        @String.Format("{0}", "Beschikbaar")
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-md-3"><strong>Land:</strong></div>
                <div class="col-md-9">@String.Format("{0}", @Model.GCComGeocacheData.Country ?? "")</div>
            </div>
            <div class="row">
                <div class="col-md-3"><strong>Provincie:</strong></div>
                <div class="col-md-9">@String.Format("{0}", @Model.GCComGeocacheData.State ?? "")</div>
            </div>
            <div class="row">
                <div class="col-md-3"><strong>Plaats:</strong></div>
                <div class="col-md-9">@String.Format("{0}", @Model.GCEuGeocacheData.City ?? "")</div>
            </div>
            <div class="row">
                <div class="col-md-3"><strong>Eigenaar:</strong></div>
                <div class="col-md-9"><a href="http://www.geocaching.com/profile/?guid=@Model.Owner.PublicGuid" target="_blank">@Model.Owner.UserName</a></div>
            </div>
            <div class="row">
                <div class="col-md-3"><strong>Plaatsingsdatum:</strong></div>
                <div class="col-md-9">
                    @String.Format("{0:d}", @Model.GCComGeocacheData.UTCPlaceDate)
                </div>
            </div>
            <div class="row">
                <div class="col-md-3"><strong>Gepubliceerd:</strong></div>
                <div class="col-md-9">
                    @if (@Model.GCEuGeocacheData.PublishedAtDate != null)
                    {
                        @String.Format("{0:d}", @Model.GCEuGeocacheData.PublishedAtDate)
                    }
                    else
                    {
                        @String.Format("{0:d}", @Model.GCComGeocacheData.UTCPlaceDate)
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-md-3"><strong>Favorites:</strong></div>
                <div class="col-md-9">
                    @if (@Model.GCComGeocacheData.FavoritePoints != null)
                    {
                        @String.Format("{0}", @Model.GCComGeocacheData.FavoritePoints)
                    }
                    else
                    {
                        @Html.Raw("Onbekend")
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-md-3"><strong>Aangepast:</strong></div>
                <div class="col-md-9">@String.Format("{0:d}", @Model.GCComGeocacheData.DateLastUpdate)</div>
            </div>
            <div class="row">
                <div class="col-md-3"><strong>Container:</strong></div>
                <div class="col-md-9"><img src="@Href(string.Format("~/Modules/Globalcaching/Media/container/{0}.gif", @Model.GCComGeocacheData.ContainerTypeId))" /></div>
            </div>
            <div class="row">
                <div class="col-md-3"><strong>Moeilijkheid:</strong></div>
                <div class="col-md-9"><img src="@Href(string.Format("~/Modules/Globalcaching/Media/stars/stars{0}.gif", @Model.GCComGeocacheData.Difficulty.ToString("0.#").Replace(',', '_').Replace('.', '_')))" /></div>
            </div>
            <div class="row">
                <div class="col-md-3"><strong>Terrein:</strong></div>
                <div class="col-md-9"><img src="@Href(string.Format("~/Modules/Globalcaching/Media/stars/stars{0}.gif", @Model.GCComGeocacheData.Terrain.ToString("0.#").Replace(',', '_').Replace('.', '_')))" /></div>
            </div>
            <div class="row">
                <div class="col-md-3"><strong>Afstand:</strong></div>
                <div class="col-md-9">
                    <table>
                        <tr>
                            <td>
                                @if (@Model.GCEuGeocacheData.Distance != null)
                                {
                                    @String.Format("{0:0.#} km", @Model.GCEuGeocacheData.Distance)
                                }
                                else
                                {
                                    @Html.Raw("Onbekend")
                                }
                            </td>
                            @if (Model.IsDistanceAdmin == true)
                            {
                                <td><input type="text" id="distance" width="10" height="12" /></td>
                                <td><button class="btn btn-primary btn-xs" onclick="setDistance()">opslaan</button></td>
                                <td><button class="btn btn-primary btn-xs" onclick="clearDistance()">verwijder</button></td>
                            }
                        </tr>
                    </table>
                </div>
            </div>
            <div class="row">
                <div class="col-md-3"><strong>Premium:</strong></div>
                <div class="col-md-9">
                    @if (@Model.GCComGeocacheData.IsPremium != null)
                    {
                        @String.Format("{0}", @Model.GCComGeocacheData.IsPremium == true ? "Ja" : "Nee")
                    }
                    else
                    {
                        @Html.Raw("Onbekend")
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-md-3"><strong>Gevonden:</strong></div>
                <div class="col-md-9">@String.Format("{0}", @Model.GCEuGeocacheData.FoundCount)</div>
            </div>
            <div class="row">
                <div class="col-md-3"><strong>FTF:</strong></div>
                <div class="col-md-9">
                    @if (Model.FTF == null)
                    {
                        <span>-</span>
                    }
                    else
                    {
                        <a href="http://www.geocaching.com/profile/?guid=@Model.Owner.PublicGuid" target="_blank">@Model.FTF.UserName</a>
                        if (Model.IsFTFAdmin == true)
                        {
                            <button class="btn btn-primary btn-xs" onclick="@string.Format("clearFTF({0})", Model.GCComGeocacheData.ID)">Verwijder</button>
                        }
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-md-3"><strong>STF:</strong></div>
                <div class="col-md-9">
                    @if (Model.STF == null)
                    {
                        <span>-</span>
                    }
                    else
                    {
                        <a href="http://www.geocaching.com/profile/?guid=@Model.Owner.PublicGuid" target="_blank">@Model.STF.UserName</a>
                        if (Model.IsFTFAdmin == true)
                        {
                            <button class="btn btn-primary  btn-xs" onclick="@string.Format("clearSTF({0})", Model.GCComGeocacheData.ID)">Verwijder</button>
                        }
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-md-3"><strong>TTF:</strong></div>
                <div class="col-md-9">
                    @if (Model.TTF == null)
                    {
                        <span>-</span>
                    }
                    else
                    {
                        <a href="http://www.geocaching.com/profile/?guid=@Model.Owner.PublicGuid" target="_blank">@Model.TTF.UserName</a>
                        if (Model.IsFTFAdmin)
                        {
                            <button class="btn btn-primary  btn-xs" onclick="@string.Format("clearTTF({0})", Model.GCComGeocacheData.ID)">Verwijder</button>
                        }
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-md-3"><strong>Attributen:</strong></div>
                <div class="col-md-9">
                    @foreach (var attr in Model.Attributes)
                    {
                        <img src="@Href(string.Format("~/Modules/Globalcaching/Media/attributes/{1}{0}.gif", attr.AttributeType.ID, attr.Attribute.IsOn?"":"_"))" title="@attr.AttributeType.Name" />
                    }
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <center>
                <a type="button" class="btn btn-primary" href='@Href("~/LogGeocache/")@Model.GCComGeocacheData.ID'>Log geocache</a><br />
                <br />
                <a href="@Href(string.Format("~/GeocacheKaart/?wp={0}", Model.GCComGeocacheData.Code))" /><img src="http://maps.google.com/staticmap?center=@String.Format("{0}", @Model.GCComGeocacheData.Latitude).Replace(',','.'),@String.Format("{0}", @Model.GCComGeocacheData.Longitude).Replace(',','.')&zoom=14&size=200x200&markers=@String.Format("{0}", @Model.GCComGeocacheData.Latitude).Replace(',','.'),@String.Format("{0}", @Model.GCComGeocacheData.Longitude).Replace(',', '.')&sensor=false&key=ABQIAAAA-nQeFBL402x2iqXj-luWHRRZ7lFWuhE4D67K-pLeOMx4c6kO7BQqsKyCl9XQiys9GSNtLRbR_Hotog" /></a><br />
                <br />
                @using (Html.BeginFormAntiForgeryPost(Url.Action("DownloadGeocache", "LiveAPIDownload", new { area = "Globalcaching" }), FormMethod.Post, new { role = "form" }))
                {
                    <input name="id" type="hidden" value="@Model.GCComGeocacheData.Code" />
                    <button type="submit" value="Download" class="btn btn-primary">@T("Download")</button>
                }
            </center>
        </div>
    </div>
</div>

<div class="panel panel-primary">
    <div class="panel-heading">
        Beschrijving
    </div>
    <div class="panel-body">
        @if (@Model.GCComGeocacheData.ShortDescription != null)
        {
            if (@Model.GCComGeocacheData.ShortDescriptionIsHtml)
            {
                @Html.Raw(@Model.GCComGeocacheData.ShortDescription.Replace("http://imgcdn.geocaching.com/cache/large/", string.Format("/cache/large/{0}/", Model.GCComGeocacheData.Code)))
            }
            else
            {
                @Model.GCComGeocacheData.ShortDescription.Replace("\r", "<br />")
            }
        }
        @if (@Model.GCComGeocacheData.LongDescription != null)
        {
            if (@Model.GCComGeocacheData.LongDescriptionIsHtml)
            {
                @Html.Raw(@Model.GCComGeocacheData.LongDescription.Replace("http://imgcdn.geocaching.com/cache/large/", string.Format("/cache/large/{0}/", Model.GCComGeocacheData.Code)))
            }
            else
            {
                @Model.GCComGeocacheData.LongDescription.Replace("\r", "<br />")
            }
        }
    </div>
</div>

@if (Model.GeocacheImages != null && Model.GeocacheImages.Count > 0)
{
    <div class="panel panel-primary">
        <div class="panel-heading">
            Plaatjes
        </div>
        <div class="panel-body">
            @foreach (var p in Model.GeocacheImages)
            {
                if (!p.Url.StartsWith("http://img-api.geocaching.com"))
                {
                    <img src='@Href("~/Modules/Globalcaching/Media/images.gif")' /> <a href="@p.Url.Replace("http://imgcdn.geocaching.com/cache/", string.Format("/cache/large/{0}/", Model.GCComGeocacheData.Code))" target="_blank">@p.Name</a><br />
                    <span>&nbsp;&nbsp;&nbsp;</span>@p.Description<br />
                }
            }
        </div>
    </div>
}

<div class="panel panel-primary">
    <div class="panel-heading">
        Hints
    </div>
    <div class="panel-body">
        @if (@Model.GCComGeocacheData.EncodedHints != null)
        {
            @Model.GCComGeocacheData.EncodedHints.Replace("\r", "<br />")
        }
    </div>
</div>

<div class="panel panel-primary">
    <div class="panel-heading">
        Logs
    </div>
    <div class="panel-body">
        <div class="row">
            <div class="col-md-12">
                @foreach (var lt in Model.LogCounts)
                {
                    <img src="@Href(string.Format("~/Modules/Globalcaching/Media/logtypes/{0}.gif", lt.WptLogTypeId))" /> @lt.logCount <span>&nbsp;&nbsp;</span>
                }
            </div>
            <br />
        </div>
        @{
            var words1 = new List<string>();
            int BM1Index = 0;
            if (!string.IsNullOrEmpty(Model.UserSettings.MarkLogTextColor1))
            {
                string[] parts = Model.UserSettings.MarkLogTextColor1.Split(new char[] { '\n', '\r' });
                foreach (string s in parts)
                {
                    if (s.Length > 0)
                    {
                        words1.Add(s);
                    }
                }
            }

            var words2 = new List<string>();
            int BM2Index = 0;
            if (!string.IsNullOrEmpty(Model.UserSettings.MarkLogTextColor2))
            {
                string[] parts = Model.UserSettings.MarkLogTextColor2.Split(new char[] { '\n', '\r' });
                foreach (string s in parts)
                {
                    if (s.Length > 0)
                    {
                        words2.Add(s);
                    }
                }
            }

            var words3 = new List<string>();
            int BM3Index = 0;
            if (!string.IsNullOrEmpty(Model.UserSettings.MarkLogTextColor3))
            {
                string[] parts = Model.UserSettings.MarkLogTextColor3.Split(new char[] { '\n', '\r' });
                foreach (string s in parts)
                {
                    if (s.Length > 0)
                    {
                        words3.Add(s);
                    }
                }
            }

        }
        @if (words1.Count > 0)
        {
            <a href="#m1m0" style="background-color: #ffff00">Eerste markering</a>
        }
        @if (words2.Count > 0)
        {
            <a href="#m2m0" style="background-color: #CCCCCC">Eerste markering</a>
        }
        @if (words3.Count > 0)
        {
            <a href="#m3m0" style="background-color: #FF9900">Eerste markering</a>
        }
        <table id="logs" class="table table-hover table-striped">
            <tbody>
                @foreach (var gcl in Model.GCComGeocacheLogs)
                {
                    <tr>
                        <td class="col-md-2">
                            <a href="http://www.geocaching.com/profile/?guid=@gcl.Writer.PublicGuid" target="blank">@gcl.Writer.UserName</a><br />
                            <small>
                                @if (gcl.Writer.MemberTypeId > 1)
                                {
                                    @Html.Raw("Premium Member")
                                }
                                else
                                {
                                    @Html.Raw("Member")
                                }
                            </small><br />
                            <img src="@gcl.Writer.AvatarUrl" height="48" width="48" /><br />
                            <img src="@Href("~/Modules/Globalcaching/Media/logtypes/")2.gif" />&nbsp; @gcl.Writer.FindCount
                        </td>
                        <td class="col-md-10">
                            @if (Model.IsFTFAdmin)
                            {
                                <table>
                                    <tr>
                                        <td><button class="btn btn-primary btn-xs" onclick="@string.Format("setFTF({0})", gcl.Log.ID)">FTF</button></td>
                                        <td>&nbsp;&nbsp;<button class="btn btn-primary btn-xs" onclick="@string.Format("setSTF({0})", gcl.Log.ID)">STF</button></td>
                                        <td>&nbsp;&nbsp;<button class="btn btn-primary btn-xs" onclick="@string.Format("setTTF({0})", gcl.Log.ID)">TTF</button></td>
                                    </tr>
                                </table>
                            }
                            <img src="@Href(string.Format("~/Modules/Globalcaching/Media/logtypes/{0}.gif",@gcl.Log.WptLogTypeId))" />&nbsp;
                            @foreach (var g in @Model.LogTypes)
                            {
                                if (g.ID == @gcl.Log.WptLogTypeId)
                                {
                                    @g.WptLogTypeName
                                    break;
                                }
                            }
                            <span class="pull-right"> @gcl.Log.VisitDate.ToString("d")</span><br />
                            @{
                            var logText = HttpUtility.HtmlEncode(gcl.Log.LogText).Replace("\r", "<br />");
                            foreach (string s in words1)
                            {
                                int pos = logText.IndexOf(s, StringComparison.OrdinalIgnoreCase);
                                while (pos >= 0)
                                {
                                    string replaceStr = string.Format("<a href=\"#m1m{2}\" id=m1m{0} style=\"background-color: #FFFF00\">{1}</a>", BM1Index, s, BM1Index + 1);
                                    logText = string.Concat(logText.Substring(0, pos), replaceStr, logText.Substring(pos + s.Length));
                                    BM1Index++;
                                    pos = logText.IndexOf(s, pos + replaceStr.Length, StringComparison.OrdinalIgnoreCase);
                                }
                            }
                            foreach (string s in words2)
                            {
                                int pos = logText.IndexOf(s, StringComparison.OrdinalIgnoreCase);
                                while (pos >= 0)
                                {
                                    string replaceStr = string.Format("<a href=\"#m2m{2}\" id=m2m{0} style=\"background-color: #CCCCCC\">{1}</a>", BM2Index, s, BM2Index + 1);
                                    logText = string.Concat(logText.Substring(0, pos), replaceStr, logText.Substring(pos + s.Length));
                                    BM2Index++;
                                    pos = logText.IndexOf(s, pos + replaceStr.Length, StringComparison.OrdinalIgnoreCase);
                                }
                            }
                            foreach (string s in words3)
                            {
                                int pos = logText.IndexOf(s, StringComparison.OrdinalIgnoreCase);
                                while (pos >= 0)
                                {
                                    string replaceStr = string.Format("<a href=\"#m3m{2}\" id=m3m{0} style=\"background-color: #FF9900\">{1}</a>", BM3Index, s, BM3Index + 1);
                                    logText = string.Concat(logText.Substring(0, pos), replaceStr, logText.Substring(pos + s.Length));
                                    BM3Index++;
                                    pos = logText.IndexOf(s, pos + replaceStr.Length, StringComparison.OrdinalIgnoreCase);
                                }
                            }

                            }
                            @Html.Raw(logText)
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button class="btn btn-primary" id="getalllogs">Laat alle logs zien</button>
    </div>
</div>


<script type="text/javascript">

    var geocacheCode = '@Model.GCComGeocacheData.Code';
    var geocacheID = @Model.GCComGeocacheData.ID;

    function setFTF(id)
    {
        myApp.showPleaseWait();
        $.ajax({
            type: "POST",
            url: '@Url.Action("SetFTFAssignment", "FTFStats", new { area = "Globalcaching" })',
            data: {
                geocacheId: geocacheID,
                logId: id,
                __RequestVerificationToken: '@Html.AntiForgeryTokenValueOrchard()'
            },
            success: function (response) {
                myApp.hidePleaseWait();
                if (response=="OK")
                {
                }
                else{
                    alert('Er is een fout opgetreden!');
                }
            },
            error: function (data, errorText) {
                myApp.hidePleaseWait();
                alert(errorText);
            }
        });
    }
    function setSTF(id)
    {
        myApp.showPleaseWait();
        $.ajax({
            type: "POST",
            url: '@Url.Action("SetSTFAssignment", "FTFStats", new { area = "Globalcaching" })',
            data: {
                geocacheId: geocacheID,
                logId: id,
                __RequestVerificationToken: '@Html.AntiForgeryTokenValueOrchard()'
            },
            success: function (response) {
                myApp.hidePleaseWait();
                if (response=="OK")
                {
                }
                else{
                    alert('Er is een fout opgetreden!');
                }
            },
            error: function (data, errorText) {
                myApp.hidePleaseWait();
                alert(errorText);
            }
        });
    }
    function setTTF(id)
    {
        myApp.showPleaseWait();
        $.ajax({
            type: "POST",
            url: '@Url.Action("SetTTFAssignment", "FTFStats", new { area = "Globalcaching" })',
            data: {
                geocacheId: geocacheID,
                logId: id,
                __RequestVerificationToken: '@Html.AntiForgeryTokenValueOrchard()'
            },
            success: function (response) {
                myApp.hidePleaseWait();
                if (response=="OK")
                {
                }
                else{
                    alert('Er is een fout opgetreden!');
                }
            },
            error: function (data, errorText) {
                myApp.hidePleaseWait();
                alert(errorText);
            }
        });
    }

    function clearFTF() {
        myApp.showPleaseWait();
        $.ajax({
            type: "POST",
            url: '@Url.Action("ClearFTFAssignment", "FTFStats", new { area = "Globalcaching" })',
            data: {
                id: id,
                __RequestVerificationToken: '@Html.AntiForgeryTokenValueOrchard()'
            },
            success: function (response) {
                window.location.reload(true);
            },
            error: function (data, errorText) {
                myApp.showPleaseWait();
                alert(errorText);
            }
        });
    }

    function setDistance()
    {
        myApp.showPleaseWait();
        $.ajax({
            type: "POST",
            url: '@Url.Action("SetDistance", "GeocacheDistance", new { area = "Globalcaching" })',
            data: {
                id: geocacheID,
                distance: $("#distance").val(),
                __RequestVerificationToken: '@Html.AntiForgeryTokenValueOrchard()'
            },
            success: function (response) {
                window.location.reload(true);
            },
            error: function (data, errorText) {
                myApp.showPleaseWait();
                alert(errorText);
            }
        });
    }

    function clearDistance()
    {
        myApp.showPleaseWait();
        $.ajax({
            type: "POST",
            url: '@Url.Action("ClearDistance", "GeocacheDistance", new { area = "Globalcaching" })',
            data: {
                id: geocacheID,
                __RequestVerificationToken: '@Html.AntiForgeryTokenValueOrchard()'
            },
            success: function (response) {
                window.location.reload(true);
            },
            error: function (data, errorText) {
                myApp.showPleaseWait();
                alert(errorText);
            }
        });
    }

    function getAllLogs()
    {
        myApp.showPleaseWait();
        window.location.assign('@Href("~/Geocache/")' + geocacheCode + '?al=1#logs');
    }

    $("#getalllogs").click(function () {
        getAllLogs();
    });

    $(function () {
        if (window.location.href.indexOf('?al=1') > 0) {
            $("#getalllogs").hide();
        }
    });
</script>
